<?php
/**
 * UploadsApiTest
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use OpenAPI\Client\Api\UploadsApi;
use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use OpenAPI\Client\Model\RequiredAddressColumnMapping;
use OpenAPI\Client\Model\UploadWritable;
use PHPUnit\Framework\TestCase;
use \OpenAPI\Client\Model\CampaignWritable;
use \OpenAPI\Client\Model\CampaignUpdatable;
use \OpenAPI\Client\Model\CmpScheduleType;
use \OpenAPI\Client\Api\CampaignsApi;

/**
 * UploadsApiSpecTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

class UploadsApiSpecTest extends TestCase
{
    /**
     * Setup before running any test cases
     */
    private static $config;
    private static $campaignApi;
    private static $uploadsApi;
    private static $campaign1;
    private static $createdCampaign;
    private static $uploadWritable;


    // for teardown post-testing
    private $idsForCleanup = [];

    // set up constant fixtures
    public static function setUpBeforeClass(): void
    {
        // create instance of UploadsApi & an editable campaign for other tests
        self::$config = new Configuration();
        self::$config->setApiKey('basic', getenv('LOB_API_TEST_KEY'));
        self::$campaignApi = new CampaignsApi(self::$config);
        self::$uploadsApi = new UploadsApi(self::$config);

        // for List
        self::$campaign1 = new CampaignWritable();
        $time = floor(microtime(true) * 1000);
        self::$campaign1->setName("PHP Integration Test Campaign {$time}");
        self::$campaign1->setScheduleType(CmpScheduleType::IMMEDIATE->value);

        self::$campaignApi = new CampaignsApi(self::$config);
        self::$createdCampaign = self::$campaignApi->create(self::$campaign1);

        self::$uploadWritable = new UploadWritable();
        self::$uploadWritable->setCampaignId(self::$createdCampaign->getId());
        $requiredColumnMapping = new RequiredAddressColumnMapping();
        $requiredColumnMapping->setName("recipient");
        $requiredColumnMapping->setAddressLine1("primary_line");
        $requiredColumnMapping->setAddressCity("city");
        $requiredColumnMapping->setAddressState("state");
        $requiredColumnMapping->setAddressZip(("zip_code"));
        self::$uploadWritable->setRequiredAddressColumnMapping($requiredColumnMapping);
    }

    public function tearDown(): void
    {
        foreach ($this->idsForCleanup as $id) {
            self::$uploadsApi->delete($id);
        }
    }

     /**
     * @group integration
     * @group uploads
     */
    public function testUploadsApiInstantiation200() {
        try {
            $uploadsApi200 = new UploadsApi(self::$config);
            $this->assertEquals(gettype($uploadsApi200), 'object');
        } catch (Exception $instantiationError) {
            echo 'Caught exception: ',  $instantiationError->getMessage(), "\n";
        }
    }

    /**
     * @group integration
     * @group uploads
     */
    public function testCreate200()
    {
        try {
            $createdUpload = self::$uploadsApi->create(self::$uploadWritable);
            $this->assertMatchesRegularExpression('/upl_/', $createdUpload->getId());
            array_push($this->idsForCleanup, $createdUpload->getId());
        } catch (\Exception $e) {
            echo 'Caught exception: ',  $e->getMessage(), "\n";
        }
    }

    /**
     * @group integration
     * @group uploads
     */
    public function testGet200()
    {
        $createdUpload = self::$uploadsApi->create(self::$uploadWritable);

        try {
            $retrievedUpload = self::$uploadsApi->get($createdUpload->getId());
            $this->assertEquals($createdUpload->getId(), $retrievedUpload->getId());
            array_push($this->idsForCleanup, $createdUpload->getId());
        } catch (\Exception $e) {
            echo 'Caught exception: ',  $e->getMessage(), "\n";
        }
    }

    public function testUploadFile200()
    {
        $createdUpload = self::$uploadsApi->create(self::$uploadWritable);
        $retrievedUpload = self::$uploadsApi->get($createdUpload->getId());

        try {
            array_push($this->idsForCleanup, $createdUpload->getId());
            $retrievedUpload = self::$uploadsApi->upload_file($createdUpload->getId(),"/test/Helper/lobster-family.csv" );
            $this->assertNotNull($retrievedUpload->getFilename());
        } catch (\Exception $e) {
            echo 'Caught exception: ',  $e->getMessage(), "\n";
        }
    }
}
