<?php
/**
 * AddressDomesticExpandedTest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Client\Test\Model;

use OpenAPI\Client\Model\AddressDomesticExpanded;
use PHPUnit\Framework\TestCase;

/**
 * AddressDomesticExpandedTest Class Doc Comment
 *
 * @category    Class
 * @description AddressDomesticExpanded
 * @package     OpenAPI\Client
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class AddressDomesticExpandedTest extends TestCase
{
    /**
     * Test attribute "address_line1"
     * @group address
     * @group unit
     * @group model
     */
    public function testPropertyAddressLine1()
    {
        // Procedural
        $address = new AddressDomesticExpanded();
        $address->setAddressLine1("fake");
        $this->assertEquals($address->getAddressLine1(), "fake");

        // Construction
        $address = new AddressDomesticExpanded(["address_line1" => "fake2"]);
        $this->assertEquals($address->getAddressLine1(), "fake2");

        // Array Access
        $address = new AddressDomesticExpanded();
        $address["address_line1"] = "fake3";
        $this->assertEquals($address->getAddressLine1(), "fake3");
    }

    /**
     * Test attribute "address_line1"
     * @group address
     * @group unit
     * @group model
     */
    public function testPropertyAddressLine1Exception()
    {
        $address = new AddressDomesticExpanded();
        $this->expectException(\InvalidArgumentException::class);
        $address->setAddressLine1(str_repeat("N", 201));
    }

    /**
     * Test attribute "address_line2"
     * @group address
     * @group unit
     * @group model
     */
    public function testPropertyAddressLine2()
    {
        // Procedural
        $address = new AddressDomesticExpanded();
        $address->setAddressLine2("fake");
        $this->assertEquals($address->getAddressLine2(), "fake");

        // Construction
        $address = new AddressDomesticExpanded(["address_line2" => "fake2"]);
        $this->assertEquals($address->getAddressLine2(), "fake2");

        // Array Access
        $address = new AddressDomesticExpanded();
        $address["address_line2"] = "fake3";
        $this->assertEquals($address->getAddressLine2(), "fake3");
    }

    /**
     * Test attribute "address_line2"
     * @group address
     * @group unit
     * @group model
     */
    public function testPropertyAddressLine2Exception()
    {
        $address = new AddressDomesticExpanded();
        $this->expectException(\InvalidArgumentException::class);
        $address->setAddressLine2(str_repeat("N", 201));
    }

    /**
     * Test attribute "address_city"
     * @group address
     * @group unit
     * @group model
     */
    public function testPropertyAddressCity()
    {
        // Procedural
        $address = new AddressDomesticExpanded();
        $address->setAddressCity("fake");
        $this->assertEquals($address->getAddressCity(), "fake");

        // Construction
        $address = new AddressDomesticExpanded(["address_city" => "fake2"]);
        $this->assertEquals($address->getAddressCity(), "fake2");

        // Array Access
        $address = new AddressDomesticExpanded();
        $address["address_city"] = "fake3";
        $this->assertEquals($address->getAddressCity(), "fake3");
    }

    /**
     * Test attribute "address_city"
     * @group address
     * @group unit
     * @group model
     */
    public function testPropertyAddressCityException()
    {
        $address = new AddressDomesticExpanded();
        $this->expectException(\InvalidArgumentException::class);
        $address->setAddressCity(str_repeat("N", 300));
    }

    /**
     * Test attribute "address_state"
     * @group address
     * @group unit
     * @group model
     */
    public function testPropertyAddressState()
    {
        // Procedural
        $address = new AddressDomesticExpanded();
        $address->setAddressState("CA");
        $this->assertEquals($address->getAddressState(), "CA");

        // Construction
        $address = new AddressDomesticExpanded(["address_state" => "NY"]);
        $this->assertEquals($address->getAddressState(), "NY");

        // Array Access
        $address = new AddressDomesticExpanded();
        $address["address_state"] = "NJ";
        $this->assertEquals($address->getAddressState(), "NJ");
    }

    /**
     * Test attribute "address_state"
     * @group address
     * @group unit
     * @group model
     */
    public function testPropertyAddressStateException()
    {
        $address = new AddressDomesticExpanded();
        $this->expectException(\InvalidArgumentException::class);
        $address->setAddressState(str_repeat("N", 201));
    }

    /**
     * Test attribute "address_zip"
     * @group address
     * @group unit
     * @group model
     */
    public function testPropertyAddressZip()
    {
        // Procedural
        $address = new AddressDomesticExpanded();
        $address->setAddressZip("00000");
        $this->assertEquals($address->getAddressZip(), "00000");

        // Construction
        $address = new AddressDomesticExpanded(["address_zip" => "11111"]);
        $this->assertEquals($address->getAddressZip(), "11111");

        // Array Access
        $address = new AddressDomesticExpanded();
        $address["address_zip"] = "22222";
        $this->assertEquals($address->getAddressZip(), "22222");
    }

    /**
     * Test attribute "address_zip"
     * @group address
     * @group unit
     * @group model
     */
    public function testPropertyAddressZipException()
    {
        $address = new AddressDomesticExpanded();
        $this->expectException(\InvalidArgumentException::class);
        $address->setAddressZip(str_repeat("N", 41));
    }

    /**
     * Test attribute "description"
     * @group address
     * @group unit
     * @group model
     */
    public function testPropertyDescription()
    {
        // Procedural
        $address = new AddressDomesticExpanded();
        $address->setDescription("fake");
        $this->assertEquals($address->getDescription(), "fake");

        // Construction
        $address = new AddressDomesticExpanded(["description" => "fake2"]);
        $this->assertEquals($address->getDescription(), "fake2");

        // Array Access
        $address = new AddressDomesticExpanded();
        $address["description"] = "fake3";
        $this->assertEquals($address->getDescription(), "fake3");
    }

    /**
     * Test attribute "description"
     * @group address
     * @group unit
     * @group model
     */
    public function testPropertyDescriptionException()
    {
        // Procedural
        $address = new AddressDomesticExpanded();
        $this->expectException(\InvalidArgumentException::class);
        $address->setDescription(str_repeat("N", 300));
    }

    /**
     * Test attribute "name"
     * @group address
     * @group unit
     * @group model
     */
    public function testPropertyName()
    {
        // Procedural
        $address = new AddressDomesticExpanded();
        $address->setName("fake");
        $this->assertEquals($address->getName(), "fake");

        // Construction
        $address = new AddressDomesticExpanded(["name" => "fake2"]);
        $this->assertEquals($address->getName(), "fake2");

        // Array Access
        $address = new AddressDomesticExpanded();
        $address["name"] = "fake3";
        $this->assertEquals($address->getName(), "fake3");
    }

    /**
     * Test attribute "name"
     * @group address
     * @group unit
     * @group model
     */
    public function testPropertyNameException()
    {
        // Procedural
        $address = new AddressDomesticExpanded();
        $this->expectException(\InvalidArgumentException::class);
        $address->setName(str_repeat("N", 100));
    }

    /**
     * Test attribute "company"
     * @group address
     * @group unit
     * @group model
     */
    public function testPropertyCompany()
    {
        // Procedural
        $address = new AddressDomesticExpanded();
        $address->setCompany("fake");
        $this->assertEquals($address->getCompany(), "fake");

        // Construction
        $address = new AddressDomesticExpanded(["company" => "fake2"]);
        $this->assertEquals($address->getCompany(), "fake2");

        // Array Access
        $address = new AddressDomesticExpanded();
        $address["company"] = "fake3";
        $this->assertEquals($address->getCompany(), "fake3");
    }

    /**
     * Test attribute "company"
     * @group address
     * @group unit
     * @group model
     */
    public function testPropertyCompanyException()
    {
        // Procedural
        $address = new AddressDomesticExpanded();
        $this->expectException(\InvalidArgumentException::class);
        $address->setCompany(str_repeat("N", 100));
    }

    /**
     * Test attribute "phone"
     * @group address
     * @group unit
     * @group model
     */
    public function testPropertyPhone()
    {
        // Procedural
        $address = new AddressDomesticExpanded();
        $address->setPhone("fake");
        $this->assertEquals($address->getPhone(), "fake");

        // Construction
        $address = new AddressDomesticExpanded(["phone" => "fake2"]);
        $this->assertEquals($address->getPhone(), "fake2");

        // Array Access
        $address = new AddressDomesticExpanded();
        $address["phone"] = "fake3";
        $this->assertEquals($address->getPhone(), "fake3");
    }

    /**
     * Test attribute "phone"
     * @group address
     * @group unit
     * @group model
     */
    public function testPropertyPhoneException()
    {
        $address = new AddressDomesticExpanded();
        $this->expectException(\InvalidArgumentException::class);
        $address->setPhone(str_repeat("N", 100));
    }

    /**
     * Test attribute "email"
     * @group address
     * @group unit
     * @group model
     */
    public function testPropertyEmail()
    {
        // Procedural
        $address = new AddressDomesticExpanded();
        $address->setEmail("fake@email.com");
        $this->assertEquals($address->getEmail(), "fake@email.com");

        // Construction
        $address = new AddressDomesticExpanded(["email" => "fake2@email.com"]);
        $this->assertEquals($address->getEmail(), "fake2@email.com");

        // Array Access
        $address = new AddressDomesticExpanded();
        $address["email"] = "fake3@email.com";
        $this->assertEquals($address->getEmail(), "fake3@email.com");
    }

    /**
     * Test attribute "email"
     * @group address
     * @group unit
     * @group model
     */
    public function testPropertyEmailException()
    {
        $address = new AddressDomesticExpanded();
        $this->expectException(\InvalidArgumentException::class);
        $address->setEmail(str_repeat("N", 200));
    }

    /**
     * Test attribute "address_country"
     * @group address
     * @group unit
     * @group model
     */
    public function testPropertyAddressCountry()
    {
        // Procedural
        $address = new AddressDomesticExpanded();
        $address->setAddressCountry("UNITED STATES");
        $this->assertEquals($address->getAddressCountry(), "UNITED STATES");

        // Construction
        $address = new AddressDomesticExpanded(["address_country" => "UNITED STATES"]);
        $this->assertEquals($address->getAddressCountry(), "UNITED STATES");

        // Array Access
        $address = new AddressDomesticExpanded();
        $address["address_country"] = "UNITED STATES";
        $this->assertEquals($address->getAddressCountry(), "UNITED STATES");
    }

    /**
     * Test attribute "address_country"
     * @group address
     * @group unit
     * @group model
     */
    public function testPropertyAddressCountryException()
    {
        // Procedural
        $address = new AddressDomesticExpanded();
        $this->expectException(\InvalidArgumentException::class);
        $address->setAddressCountry("Nope");
    }

    /**
     * Test attribute "metadata"
     * @group address
     * @group unit
     * @group model
     */
    public function testPropertyMetadata()
    {
        // Procedural
        $address = new AddressDomesticExpanded();
        $address->setMetadata(["campaign" => "fake"]);
        $this->assertEquals($address->getMetadata()["campaign"], "fake");

        // Construction
        $address = new AddressDomesticExpanded(["metadata" => ["campaign" => "fake2"]]);
        $this->assertEquals($address->getMetadata()["campaign"], "fake2");

        // Array Access
        $address = new AddressDomesticExpanded();
        $address["metadata"] = ["campaign" => "fake3"];
        $this->assertEquals($address->getMetadata()["campaign"], "fake3");
    }

    /** **** **** **** **** **** **/
    /**  Generic Model Helpers   **/
    /** **** **** **** **** **** **/

    /**
     * Test attribute "ModelName"
     * @group address
     * @group unit
     * @group model
     */
    public function testPropertyModelName()
    {
        $address = new AddressDomesticExpanded();
        $this->assertEquals($address->getModelName(), "address_domestic_expanded");
    }

    /**
     * Test attribute "ListInvalidProperties"
     * @group address
     * @group unit
     * @group model
     */
    public function testValidProperties()
    {
        $address = new AddressDomesticExpanded();
        $address["description"] = str_repeat("N", 300);
        $address["name"] = str_repeat("N", 50);
        $address["company"] = str_repeat("N", 50);
        $address["phone"] = str_repeat("N", 50);
        $address["email"] = str_repeat("N", 150);
        $address["address_line1"] = str_repeat("N", 201);
        $address["address_line2"] = str_repeat("N", 201);
        $address["address_city"] = str_repeat("N", 201);
        $address["address_state"] = str_repeat("N", 201);
        $address["address_zip"] = str_repeat("N", 41);
        $address["address_country"] = "NOPE";

        $invalidPros = $address->listInvalidProperties();
        $this->assertEquals(count($invalidPros), 11);
        $this->assertEquals($address->valid(), false);
    }

    /**
     * Tests for alternative property accessors
     * @group address
     * @group unit
     * @group model
     */
    public function testGenericProperties()
    {
        $list = new AddressDomesticExpanded();
        $list->offsetSet('object', 'address');
        $this->assertEquals($list->offsetExists('object'), true);
        $this->assertEquals($list->offsetGet('object'), 'address');
        $list->offsetUnset('object');
        $this->assertEquals($list->offsetGet('object'), null);
    }
}
