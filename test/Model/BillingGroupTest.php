<?php
/**
 * BillingGroupTest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Client\Test\Model;

use OpenAPI\Client\Model\BillingGroup;
use PHPUnit\Framework\TestCase;

/**
 * BillingGroupTest Class Doc Comment
 *
 * @category    Class
 * @description BillingGroup
 * @package     OpenAPI\Client
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class BillingGroupTest extends TestCase
{
    /**
     * Test attribute "description"
     * @group billing_group
     * @group unit
     * @group model
     */
    public function testPropertyDescription()
    {
        // Procedural
        $group = new BillingGroup();
        $group->setDescription("fake");
        $this->assertEquals($group->getDescription(), "fake");

        // Construction
        $group = new BillingGroup(["description" => "fake2"]);
        $this->assertEquals($group->getDescription(), "fake2");

        // Array Access
        $group = new BillingGroup();
        $group["description"] = "fake3";
        $this->assertEquals($group->getDescription(), "fake3");
    }

    /**
     * Test attribute "description"
     * @group billing_group
     * @group unit
     * @group model
     */
    public function testPropertyDescriptionException()
    {
        $group = new BillingGroup();
        $this->expectException(\InvalidArgumentException::class);
        $group->setDescription(str_repeat("N", 256));
    }

    /**
     * Test attribute "name"
     * @group billing_group
     * @group unit
     * @group model
     */
    public function testPropertyName()
    {
        // Procedural
        $group = new BillingGroup();
        $group->setName("bg_fake");
        $this->assertEquals($group->getName(), "bg_fake");

        // Construction
        $group = new BillingGroup(["name" => "bg_fake2"]);
        $this->assertEquals($group->getName(), "bg_fake2");

        // Array Access
        $group = new BillingGroup();
        $group["name"] = "bg_fake3";
        $this->assertEquals($group->getName(), "bg_fake3");
    }

    /**
     * Test attribute "id"
     * @group billing_group
     * @group unit
     * @group model
     */
    public function testPropertyNameException()
    {
        $group = new BillingGroup();
        $this->expectException(\InvalidArgumentException::class);
        $group->setName(str_repeat("N", 256));
    }

    /**
     * Test attribute "id"
     * @group billing_group
     * @group unit
     * @group model
     */
    public function testPropertyId()
    {
        // Procedural
        $group = new BillingGroup();
        $group->setId("bg_fake");
        $this->assertEquals($group->getId(), "bg_fake");

        // Construction
        $group = new BillingGroup(["id" => "bg_fake2"]);
        $this->assertEquals($group->getId(), "bg_fake2");

        // Array Access
        $group = new BillingGroup();
        $group["id"] = "bg_fake3";
        $this->assertEquals($group->getId(), "bg_fake3");
    }

    /**
     * Test attribute "id"
     * @group billing_group
     * @group unit
     * @group model
     */
    public function testPropertyIdException()
    {
        $group = new BillingGroup();
        $this->expectException(\InvalidArgumentException::class);
        $group->setId("NOPE");
    }

    /**
     * Test attribute "date_created"
     * @group billing_group
     * @group unit
     * @group model
     */
    public function testPropertyDateCreated()
    {
        $date = new \DateTime('2011-01-01T15:03:01.012345Z');

        // Procedural
        $group = new BillingGroup();
        $group->setDateCreated($date);
        $this->assertEquals($group->getDateCreated(), $date);
    }

    /**
     * Test attribute "date_modified"
     * @group billing_group
     * @group unit
     * @group model
     */
    public function testPropertyDateModified()
    {
        $date = new \DateTime('2011-01-01T15:03:01.012345Z');

        // Procedural
        $group = new BillingGroup();
        $group->setDateModified($date);
        $this->assertEquals($group->getDateModified(), $date);
    }

    /**
     * Test attribute "object"
     * @group billing_group
     * @group unit
     * @group model
     */
    public function testPropertyObject()
    {
        // Procedural
        $group = new BillingGroup();
        $group->setObject("billing_group");
        $this->assertEquals($group->getObject(), "billing_group");
    }

    /**
     * Test attribute "object"
     * @group billing_group
     * @group unit
     * @group model
     */
    public function testPropertyObjectException()
    {
        $group = new BillingGroup();
        $this->expectException(\InvalidArgumentException::class);
        $group->setObject("NOPE");
    }

    /** **** **** **** **** **** **/
    /**  Generic Model Helpers   **/
    /** **** **** **** **** **** **/

    /**
     * Test attribute "ModelName"
     * @group billing_group
     * @group unit
     * @group model
     */
    public function testPropertyModelName()
    {
        $group = new BillingGroup();
        $this->assertEquals($group->getModelName(), "billing_group");
    }

    /**
     * Test attribute "ListInvalidProperties"
     * @group billing_group
     * @group unit
     * @group model
     */
    public function testValidProperties()
    {
        $group = new BillingGroup();
        $group["description"] = str_repeat("N", 256);
        $group["name"] = str_repeat("N", 256);
        $group["id"] = "NOPE";
        $group["object"] = str_repeat("N", 18);

        $invalidPros = $group->listInvalidProperties();
        $this->assertEquals(count($invalidPros), 4);
        $this->assertEquals($group->valid(), false);
    }

    /**
     * Tests for alternative property accessors
     * @group billing_group
     * @group unit
     * @group model
     */
    public function testGenericProperties()
    {
        $list = new BillingGroup();
        $list->offsetSet('object', 'bank_account');
        $this->assertEquals($list->offsetExists('object'), true);
        $this->assertEquals($list->offsetGet('object'), 'bank_account');
        $list->offsetUnset('object');
        $this->assertEquals($list->offsetGet('object'), null);
    }
}
