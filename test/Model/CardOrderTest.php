<?php
/**
 * CardOrderTest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Client\Test\Model;

use OpenAPI\Client\Model\CardOrder;
use PHPUnit\Framework\TestCase;

/**
 * CardOrderTest Class Doc Comment
 *
 * @category    Class
 * @description CardOrder
 * @package     OpenAPI\Client
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class CardOrderTest extends TestCase
{
    /**
     * Test attribute "id"
     * @group card_order
     * @group unit
     * @group model
     */
    public function testPropertyId()
    {
        // Procedural
        $order = new CardOrder();
        $order->setId("co_fakeId");
        $this->assertEquals($order->getId(), "co_fakeId");
    }

    /**
     * Test attribute "id"
     * @group card_order
     * @group unit
     * @group model
     */
    public function testPropertyIdException()
    {
        $order = new CardOrder();
        $this->expectException(\InvalidArgumentException::class);
        $order->setId("NOPE");
    }

    /**
     * Test attribute "card_id"
     * @group card_order
     * @group unit
     * @group model
     */
    public function testPropertyCardId()
    {
        /// Procedural
        $order = new CardOrder();
        $order->setCardId("card_fakeId");
        $this->assertEquals($order->getCardId(), "card_fakeId");
    }

    /**
     * Test attribute "card_id"
     * @group card_order
     * @group unit
     * @group model
     */
    public function testPropertyCardIdException()
    {
        $order = new CardOrder();
        $this->expectException(\InvalidArgumentException::class);
        $order->setCardId("NOPE");
    }

    /**
     * Test attribute "status"
     * @group card_order
     * @group unit
     * @group model
     */
    public function testPropertyStatus()
    {
        /// Procedural
        $order = new CardOrder();
        $order->setStatus("pending");
        $this->assertEquals($order->getStatus(), "pending");
    }

    /**
     * Test attribute "status"
     * @group card_order
     * @group unit
     * @group model
     */
    public function testPropertyStatusException()
    {
        $order = new CardOrder();
        $this->expectException(\InvalidArgumentException::class);
        $order->setStatus("NOPE");
    }

    /**
     * Test attribute "inventory"
     * @group card_order
     * @group unit
     * @group model
     */
    public function testPropertyInventory()
    {
        /// Procedural
        $order = new CardOrder();
        $order->setInventory(1);
        $this->assertEquals($order->getInventory(), 1);
    }

    /**
     * Test attribute "quantity_ordered"
     * @group card_order
     * @group unit
     * @group model
     */
    public function testPropertyQuantityOrdered()
    {
        /// Procedural
        $order = new CardOrder();
        $order->setQuantityOrdered(1);
        $this->assertEquals($order->getQuantityOrdered(), 1);
    }

    /**
     * Test attribute "unit_price"
     * @group card_order
     * @group unit
     * @group model
     */
    public function testPropertyUnitPrice()
    {
        /// Procedural
        $order = new CardOrder();
        $order->setUnitPrice(111);
        $this->assertEquals($order->getUnitPrice(), 111);
    }

    /**
     * Test attribute "cancelled_reason"
     * @group card_order
     * @group unit
     * @group model
     */
    public function testPropertyCancelledReason()
    {
        /// Procedural
        $order = new CardOrder();
        $order->setCancelledReason("fake");
        $this->assertEquals($order->getCancelledReason(), "fake");
    }

    /**
     * Test attribute "availability_date"
     * @group card_order
     * @group unit
     * @group model
     */
    public function testPropertyAvailabilityDate()
    {
        $date = new \DateTime('2011-01-01T15:03:01.012345Z');

        // Procedural
        $order = new CardOrder();
        $order->setAvailabilityDate($date);
        $this->assertEquals($order->getAvailabilityDate(), $date);
    }

    /**
     * Test attribute "expected_availability_date"
     * @group card_order
     * @group unit
     * @group model
     */
    public function testPropertyExpectedAvailabilityDate()
    {
        $date = new \DateTime('2011-01-01T15:03:01.012345Z');

        // Procedural
        $order = new CardOrder();
        $order->setExpectedAvailabilityDate($date);
        $this->assertEquals($order->getExpectedAvailabilityDate(), $date);
    }

    /**
     * Test attribute "date_created"
     * @group card_order
     * @group unit
     * @group model
     */
    public function testPropertyDateCreated()
    {
        $date = new \DateTime('2011-01-01T15:03:01.012345Z');

        // Procedural
        $order = new CardOrder();
        $order->setDateCreated($date);
        $this->assertEquals($order->getDateCreated(), $date);
    }

    /**
     * Test attribute "date_modified"
     * @group card_order
     * @group unit
     * @group model
     */
    public function testPropertyDateModified()
    {
        $date = new \DateTime('2011-01-01T15:03:01.012345Z');

        // Procedural
        $order = new CardOrder();
        $order->setDateModified($date);
        $this->assertEquals($order->getDateModified(), $date);
    }

    /**
     * Test attribute "deleted"
     * @group card_order
     * @group unit
     * @group model
     */
    public function testPropertyDeleted()
    {
        // Procedural
        $order = new CardOrder();
        $order->setDeleted(true);
        $this->assertEquals($order->getDeleted(), true);
    }

    /**
     * Test attribute "object"
     * @group card_order
     * @group unit
     * @group model
     */
    public function testPropertyObject()
    {
        // Procedural
        $order = new CardOrder();
        $order->setObject("card");
        $this->assertEquals($order->getObject(), "card");
    }

    /** **** **** **** **** **** **/
    /**  Generic Model Helpers   **/
    /** **** **** **** **** **** **/

    /**
     * Test attribute "ModelName"
     * @group billing_group
     * @group unit
     * @group model
     */
    public function testPropertyModelName()
    {
        $order = new CardOrder();
        $this->assertEquals($order->getModelName(), "card_order");
    }

    /**
     * Test attribute "ListInvalidProperties"
     * @group billing_group
     * @group unit
     * @group model
     */
    public function testValidProperties()
    {
        $order = new CardOrder();
        $order["id"] = "NOPE";
        $order["card_id"] = "NOPE";
        $order["status"] = "NOPE";

        $invalidPros = $order->listInvalidProperties();
        $this->assertEquals(count($invalidPros), 3);
        $this->assertEquals($order->valid(), false);
    }

    /**
     * Tests for alternative property accessors
     * @group billing_group
     * @group unit
     * @group model
     */
    public function testGenericProperties()
    {
        $list = new CardOrder();
        $list->offsetSet('object', 'bank_account');
        $this->assertEquals($list->offsetExists('object'), true);
        $this->assertEquals($list->offsetGet('object'), 'bank_account');
        $list->offsetUnset('object');
        $this->assertEquals($list->offsetGet('object'), null);
    }
}
