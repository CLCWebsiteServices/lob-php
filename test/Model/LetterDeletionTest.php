<?php
/**
 * LetterDeletionTest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Client\Test\Model;

use OpenAPI\Client\Model\LetterDeletion;
use PHPUnit\Framework\TestCase;

/**
 * LetterDeletionTest Class Doc Comment
 *
 * @category    Class
 * @description Lob uses RESTful HTTP response codes to indicate success or failure of an API request. In general, 2xx indicates success, 4xx indicate an input error, and 5xx indicates an error on Lob&#39;s end.
 * @package     OpenAPI\Client
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class LetterDeletionTest extends TestCase
{
    /**
     * Test attribute "id"
     * @group letter
     * @group unit
     * @group model
     */
    public function testPropertyId()
    {
        // Procedural
        $address = new LetterDeletion();
        $address->setId("ltr_fake");
        $this->assertEquals($address->getId(), "ltr_fake");

        // Construction
        $address = new LetterDeletion(["id" => "ltr_fake2"]);
        $this->assertEquals($address->getId(), "ltr_fake2");

        // Array Access
        $address = new LetterDeletion();
        $address["id"] = "ltr_fake3";
        $this->assertEquals($address->getId(), "ltr_fake3");
    }

    /**
     * Test attribute "id"
     * @group letter
     * @group unit
     * @group model
     */
    public function testPropertyIdException()
    {
        // Procedural
        $address = new LetterDeletion();
        $this->expectException(\InvalidArgumentException::class);
        $address->setId("NOPE");
    }

    /**
     * Test attribute "deleted"
     */
    public function testPropertyDeleted()
    {
        // Procedural
        $address = new LetterDeletion();
        $this->expectException(\InvalidArgumentException::class);
        $address->setId("NOPE");
    }

    /** **** **** **** **** **** **/
    /** Generic Model Properties **/
    /** **** **** **** **** **** **/

    /**
     * Test attribute "object"
     * @group letter
     * @group unit
     * @group model
     */
    public function testPropertyObject()
    {
        // Procedural
        $address = new LetterDeletion();
        $address->setObject("letter_deleted");
        $this->assertEquals($address->getObject(), "letter_deleted");

        // Construction
        $address = new LetterDeletion(["object" => "letter_deleted"]);
        $this->assertEquals($address->getObject(), "letter_deleted");

        // Array Access
        $address = new LetterDeletion();
        $address["object"] = "letter_deleted";
        $this->assertEquals($address->getObject(), "letter_deleted");
    }

    /**
     * Test attribute "object"
     * @group letter
     * @group unit
     * @group model
     */
    public function testPropertyObjectException()
    {
        // Procedural
        $address = new LetterDeletion();
        $this->expectException(\InvalidArgumentException::class);
        $address->setObject("NOPE");
    }

    /** **** **** **** **** **** **/
    /**  Generic Model Helpers   **/
    /** **** **** **** **** **** **/

    /**
     * Test attribute "ModelName"
     * @group letter
     * @group unit
     * @group model
     */
    public function testPropertyModelName()
    {
        $address = new LetterDeletion();
        $this->assertEquals($address->getModelName(), "letter_deletion");
    }

    /**
     * Test attribute "ListInvalidProperties"
     * @group letter
     * @group unit
     * @group model
     */
    public function testValidProperties()
    {
        $address = new LetterDeletion();
        $address["id"] = "NOPE";
        $address["object"] = "NOPE";

        $invalidPros = $address->listInvalidProperties();
        $this->assertEquals(count($invalidPros), 2);
        $this->assertEquals($address->valid(), false);
    }

    /**
     * Tests for alternative property accessors
     * @group letter
     * @group unit
     * @group model
     */
    public function testGenericProperties()
    {
        $list = new LetterDeletion();
        $list->offsetSet('object', 'letter_deleted');
        $this->assertEquals($list->offsetExists('object'), true);
        $this->assertEquals($list->offsetGet('object'), 'letter_deleted');
        $list->offsetUnset('object');
        $this->assertEquals($list->offsetGet('object'), null);
    }
}
