<?php
/**
 * BankAccountWritableTest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Client\Test\Model;

use OpenAPI\Client\Model\BankAccountWritable;
use OpenAPI\Client\Model\BankTypeEnum;
use PHPUnit\Framework\TestCase;

/**
 * BankAccountWritableTest Class Doc Comment
 *
 * @category    Class
 * @description BankAccountWritable
 * @package     OpenAPI\Client
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class BankAccountWritableTest extends TestCase
{
    /**
     * Test attribute "description"
     * @group bank_account
     * @group unit
     * @group model
     */
    public function testPropertyDescription()
    {
        // Procedural
        $bank = new BankAccountWritable();
        $bank->setDescription("fake");
        $this->assertEquals($bank->getDescription(), "fake");

        // Construction
        $bank = new BankAccountWritable(["description" => "fake2"]);
        $this->assertEquals($bank->getDescription(), "fake2");

        // Array Access
        $bank = new BankAccountWritable();
        $bank["description"] = "fake3";
        $this->assertEquals($bank->getDescription(), "fake3");
    }

    /**
     * Test attribute "description"
     * @group bank_account
     * @group unit
     * @group model
     */
    public function testPropertyDescriptionException()
    {
        // Procedural
        $bank = new BankAccountWritable();
        $this->expectException(\InvalidArgumentException::class);
        $bank->setDescription(str_repeat("N", 256));
    }

    /**
     * Test attribute "routing_number"
     * @group bank_account
     * @group unit
     * @group model
     */
    public function testPropertyRoutingNumber()
    {
        // Procedural
        $bank = new BankAccountWritable();
        $bank->setRoutingNumber("123456789");
        $this->assertEquals($bank->getRoutingNumber(), "123456789");

        // Construction
        $bank = new BankAccountWritable(["routing_number" => "123456789"]);
        $this->assertEquals($bank->getRoutingNumber(), "123456789");

        // Array Access
        $bank = new BankAccountWritable();
        $bank["routing_number"] = "123456789";
        $this->assertEquals($bank->getRoutingNumber(), "123456789");
    }

    /**
     * Test attribute "routing_number"
     * @group bank_account
     * @group unit
     * @group model
     */
    public function testPropertyRoutingNumberExceptionShort()
    {
        $bank = new BankAccountWritable();
        $this->expectException(\InvalidArgumentException::class);
        $bank->setRoutingNumber("SHORT");
    }

    /**
     * Test attribute "routing_number"
     * @group bank_account
     * @group unit
     * @group model
     */
    public function testPropertyRoutingNumberExceptionLong()
    {
        // Procedural
        $bank = new BankAccountWritable();
        $this->expectException(\InvalidArgumentException::class);
        $bank->setRoutingNumber("LONG_LONG_LONG");
    }

    /**
     * Test attribute "account_number"
     * @group bank_account
     * @group unit
     * @group model
     */
    public function testPropertyAccountNumber()
    {
        // Procedural
        $bank = new BankAccountWritable();
        $bank->setAccountNumber("fake");
        $this->assertEquals($bank->getAccountNumber(), "fake");

        // Construction
        $bank = new BankAccountWritable(["account_number" => "fake2"]);
        $this->assertEquals($bank->getAccountNumber(), "fake2");

        // Array Access
        $bank = new BankAccountWritable();
        $bank["account_number"] = "fake3";
        $this->assertEquals($bank->getAccountNumber(), "fake3");
    }

    /**
     * Test attribute "account_number"
     * @group bank_account
     * @group unit
     * @group model
     */
    public function testPropertyAccountNumberException()
    {
        $bank = new BankAccountWritable();
        $this->expectException(\InvalidArgumentException::class);
        $bank->setAccountNumber(str_repeat("N", 18));
    }

    /**
     * Test attribute "account_type"
     * @group bank_account
     * @group unit
     * @group model
     */
    public function testPropertyAccountType()
    {
        // Procedural
        $bank = new BankAccountWritable();
        $bank->setAccountType(BankTypeEnum::INDIVIDUAL);
        $this->assertEquals($bank->getAccountType(), BankTypeEnum::INDIVIDUAL);

        // Construction
        $bank = new BankAccountWritable(["account_type" => BankTypeEnum::INDIVIDUAL]);
        $this->assertEquals($bank->getAccountType(), BankTypeEnum::INDIVIDUAL);

        // Array Access
        $bank = new BankAccountWritable();
        $bank["account_type"] = BankTypeEnum::INDIVIDUAL;
        $this->assertEquals($bank->getAccountType(), BankTypeEnum::INDIVIDUAL);
    }

//    /**
//     * Test attribute "account_type"
//     * @group bank_account
//     * @group unit
//     * @group model
//     */
//    public function testPropertyAccountTypeException()
//    {
//        $bank = new BankAccountWritable();
//        $this->expectException(\InvalidArgumentException::class);
//        $bank->setAccountType("NOPE");
//    }

    /**
     * Test attribute "signatory"
     * @group bank_account
     * @group unit
     * @group model
     */
    public function testPropertySignatory()
    {
        // Procedural
        $bank = new BankAccountWritable();
        $bank->setSignatory("fake");
        $this->assertEquals($bank->getSignatory(), "fake");

        // Construction
        $bank = new BankAccountWritable(["signatory" => "fake2"]);
        $this->assertEquals($bank->getSignatory(), "fake2");

        // Array Access
        $bank = new BankAccountWritable();
        $bank["signatory"] = "fake3";
        $this->assertEquals($bank->getSignatory(), "fake3");
    }

    /**
     * Test attribute "signatory"
     * @group bank_account
     * @group unit
     * @group model
     */
    public function testPropertySignatoryException()
    {
        $bank = new BankAccountWritable();
        $this->expectException(\InvalidArgumentException::class);
        $bank->setSignatory(str_repeat("N", 31));
    }

    /**
     * Test attribute "metadata"
     * @group bank_account
     * @group unit
     * @group model
     */
    public function testPropertyMetadata()
    {
        // Procedural
        $bank = new BankAccountWritable();
        $bank->setMetadata(["campaign" => "fake"]);
        $this->assertEquals($bank->getMetadata()["campaign"], "fake");

        // Construction
        $bank = new BankAccountWritable(["metadata" => ["campaign" => "fake2"]]);
        $this->assertEquals($bank->getMetadata()["campaign"], "fake2");

        // Array Access
        $bank = new BankAccountWritable();
        $bank["metadata"] = ["campaign" => "fake3"];
        $this->assertEquals($bank->getMetadata()["campaign"], "fake3");
    }

    /** **** **** **** **** **** **/
    /**  Generic Model Helpers   **/
    /** **** **** **** **** **** **/

    /**
     * Test attribute "ModelName"
     * @group bank_account
     * @group unit
     * @group model
     */
    public function testPropertyModelName()
    {
        $bank = new BankAccountWritable();
        $this->assertEquals($bank->getModelName(), "bank_account_writable");
    }

    /**
     * Test attribute "ListInvalidProperties"
     * @group bank_account
     * @group unit
     * @group model
     */
    public function testValidProperties()
    {
        $bank = new BankAccountWritable();
        $bank["description"] = str_repeat("N", 256);
        $bank["routing_number"] = str_repeat("N", 10);
        $bank["account_number"] = str_repeat("N", 18);
        $bank["signatory"] = str_repeat("N", 31);
        $bank["id"] = "NOPE";

        $invalidPros = $bank->listInvalidProperties();
        $this->assertEquals(count($invalidPros), 4);
        $this->assertEquals($bank->valid(), false);

        $bank = new BankAccountWritable();
        $bank["routing_number"] = "SHORT";

        $invalidPros = $bank->listInvalidProperties();
        $this->assertEquals(count($invalidPros), 1);
        $this->assertEquals($bank->valid(), false);
    }

    /**
     * Tests for alternative property accessors
     * @group bank_account
     * @group unit
     * @group model
     */
    public function testGenericProperties()
    {
        $list = new BankAccountWritable();
        $list->offsetSet('object', 'bank_account_writable');
        $this->assertEquals($list->offsetExists('object'), true);
        $this->assertEquals($list->offsetGet('object'), 'bank_account_writable');
        $list->offsetUnset('object');
        $this->assertEquals($list->offsetGet('object'), null);
    }
}
