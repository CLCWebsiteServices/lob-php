<?php
/**
 * CardUpdatableTest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Client\Test\Model;

use OpenAPI\Client\Model\CardUpdatable;
use PHPUnit\Framework\TestCase;

/**
 * CardUpdatableTest Class Doc Comment
 *
 * @category    Class
 * @description CardUpdatable
 * @package     OpenAPI\Client
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class CardUpdatableTest extends TestCase
{
    /**
     * Test attribute "description"
     * @group card
     * @group unit
     * @group model
     */
    public function testPropertyDescription()
    {
        // Procedural
        $card = new CardUpdatable();
        $card->setDescription("fake");
        $this->assertEquals($card->getDescription(), "fake");
    }

    /**
     * Test attribute "description"
     * @group card
     * @group unit
     * @group model
     */
    public function testPropertyDescriptionException()
    {
        $card = new CardUpdatable();
        $this->expectException(\InvalidArgumentException::class);
        $card->setDescription(str_repeat("N", 256));
    }

    /**
     * Test attribute "auto_reorder"
     * @group card
     * @group unit
     * @group model
     */
    public function testPropertyAutoReorder()
    {
        // Procedural
        $card = new CardUpdatable();
        $card->setAutoReorder(false);
        $this->assertEquals($card->getAutoReorder(), false);
    }

    /**
     * Test attribute "reorder_quantity"
     * @group card
     * @group unit
     * @group model
     */
    public function testPropertyReorderQuantity()
    {
        // Procedural
        $card = new CardUpdatable();
        $card->setReorderQuantity(11000);
        $this->assertEquals($card->getReorderQuantity(), 11000);
    }

    /**
     * Test attribute "reorder_quantity"
     * @group card
     * @group unit
     * @group model
     */
    public function testPropertyReorderQuantityException()
    {
        // Procedural
        $card = new CardUpdatable();
        $this->expectException(\InvalidArgumentException::class);
        $card->setReorderQuantity(11);
    }
}
