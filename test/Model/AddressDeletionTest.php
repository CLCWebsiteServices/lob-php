<?php
/**
 * AddressDeletionTest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Client\Test\Model;

use OpenAPI\Client\Model\AddressDeletion;
use PHPUnit\Framework\TestCase;

/**
 * AddressDeletionTest Class Doc Comment
 *
 * @category    Class
 * @description Object returned upon deleting an address
 * @package     OpenAPI\Client
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class AddressDeletionTest extends TestCase
{
    /**
     * Test attribute "id"
     * @group address
     * @group unit
     * @group model
     */
    public function testPropertyId()
    {
        // Procedural
        $address = new AddressDeletion();
        $address->setId("adr_fake");
        $this->assertEquals($address->getId(), "adr_fake");

        // Construction
        $address = new AddressDeletion(["id" => "adr_fake2"]);
        $this->assertEquals($address->getId(), "adr_fake2");

        // Array Access
        $address = new AddressDeletion();
        $address["id"] = "adr_fake3";
        $this->assertEquals($address->getId(), "adr_fake3");
    }

    /**
     * Test attribute "id"
     * @group address
     * @group unit
     * @group model
     */
    public function testPropertyIdException()
    {
        // Procedural
        $address = new AddressDeletion();
        $this->expectException(\InvalidArgumentException::class);
        $address->setId("NOPE");
    }

    /**
     * Test attribute "deleted"
     */
    public function testPropertyDeleted()
    {
        // Procedural
        $address = new AddressDeletion();
        $this->expectException(\InvalidArgumentException::class);
        $address->setId("NOPE");
    }

    /** **** **** **** **** **** **/
    /** Generic Model Properties **/
    /** **** **** **** **** **** **/

    /**
     * Test attribute "object"
     * @group address
     * @group unit
     * @group model
     */
    public function testPropertyObject()
    {
        // Procedural
        $address = new AddressDeletion();
        $address->setObject("address_deleted");
        $this->assertEquals($address->getObject(), "address_deleted");

        // Construction
        $address = new AddressDeletion(["object" => "address_deleted"]);
        $this->assertEquals($address->getObject(), "address_deleted");

        // Array Access
        $address = new AddressDeletion();
        $address["object"] = "address_deleted";
        $this->assertEquals($address->getObject(), "address_deleted");
    }

    /**
     * Test attribute "object"
     * @group address
     * @group unit
     * @group model
     */
    public function testPropertyObjectException()
    {
        // Procedural
        $address = new AddressDeletion();
        $this->expectException(\InvalidArgumentException::class);
        $address->setObject("NOPE");
    }

    /** **** **** **** **** **** **/
    /**  Generic Model Helpers   **/
    /** **** **** **** **** **** **/

    /**
     * Test attribute "ModelName"
     * @group address
     * @group unit
     * @group model
     */
    public function testPropertyModelName()
    {
        $address = new AddressDeletion();
        $this->assertEquals($address->getModelName(), "address_deletion");
    }

    /**
     * Test attribute "ListInvalidProperties"
     * @group address
     * @group unit
     * @group model
     */
    public function testValidProperties()
    {
        $address = new AddressDeletion();
        $address["id"] = "NOPE";
        $address["object"] = "NOPE";

        $invalidPros = $address->listInvalidProperties();
        $this->assertEquals(count($invalidPros), 2);
        $this->assertEquals($address->valid(), false);
    }

    /**
     * Tests for alternative property accessors
     * @group address
     * @group unit
     * @group model
     */
    public function testGenericProperties()
    {
        $list = new AddressDeletion();
        $list->offsetSet('object', 'address');
        $this->assertEquals($list->offsetExists('object'), true);
        $this->assertEquals($list->offsetGet('object'), 'address');
        $list->offsetUnset('object');
        $this->assertEquals($list->offsetGet('object'), null);
    }
}
