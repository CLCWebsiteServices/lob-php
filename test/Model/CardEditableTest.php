<?php
/**
 * CardEditableTest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Client\Test\Model;

use OpenAPI\Client\Model\CardEditable;
use PHPUnit\Framework\TestCase;

/**
 * CardEditableTest Class Doc Comment
 *
 * @category    Class
 * @description CardEditable
 * @package     OpenAPI\Client
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class CardEditableTest extends TestCase
{
    /**
     * Test attribute "front"
     * @group card
     * @group unit
     * @group model
     */
    public function testPropertyFront()
    {
        // Procedural
        $card = new CardEditable();
        $card->setFront("fake");
        $this->assertEquals($card->getFront(), "fake");
    }

    /**
     * Test attribute "back"
     * @group card
     * @group unit
     * @group model
     */
    public function testPropertyBack()
    {
        // Procedural
        $card = new CardEditable();
        $card->setBack("fake");
        $this->assertEquals($card->getBack(), "fake");
    }

    /**
     * Test attribute "size"
     * @group card
     * @group unit
     * @group model
     */
    public function testPropertySize()
    {
        // Procedural
        $card = new CardEditable();
        $card->setSize("3.375x2.125");
        $this->assertEquals($card->getSize(), "3.375x2.125");
    }

    /**
     * Test attribute "size"
     * @group card
     * @group unit
     * @group model
     */
    public function testPropertySizeException()
    {
        // Procedural
        $card = new CardEditable();
        $this->expectException(\InvalidArgumentException::class);
        $card->setSize("fake");
    }

    /**
     * Test attribute "description"
     * @group card
     * @group unit
     * @group model
     */
    public function testPropertyDescription()
    {
        // Procedural
        $card = new CardEditable();
        $card->setDescription("fake");
        $this->assertEquals($card->getDescription(), "fake");
    }

    /**
     * Test attribute "description"
     * @group card
     * @group unit
     * @group model
     */
    public function testPropertyDescriptionException()
    {
        $card = new CardEditable();
        $this->expectException(\InvalidArgumentException::class);
        $card->setDescription(str_repeat("N", 256));
    }

    /** **** **** **** **** **** **/
    /**  Generic Model Helpers   **/
    /** **** **** **** **** **** **/

    /**
     * Test attribute "ModelName"
     * @group billing_group
     * @group unit
     * @group model
     */
    public function testPropertyModelName()
    {
        $card = new CardEditable();
        $this->assertEquals($card->getModelName(), "card_editable");
    }

    /**
     * Test attribute "ListInvalidProperties"
     * @group billing_group
     * @group unit
     * @group model
     */
    public function testValidProperties()
    {
        $card = new CardEditable();
        $card["description"] =  str_repeat("N", 256);
        $card["size"] =  "NOPE";

        $invalidPros = $card->listInvalidProperties();
        $this->assertEquals(count($invalidPros), 2);
        $this->assertEquals($card->valid(), false);
    }

    /**
     * Tests for alternative property accessors
     * @group billing_group
     * @group unit
     * @group model
     */
    public function testGenericProperties()
    {
        $list = new CardEditable();
        $list->offsetSet('object', 'bank_account');
        $this->assertEquals($list->offsetExists('object'), true);
        $this->assertEquals($list->offsetGet('object'), 'bank_account');
        $list->offsetUnset('object');
        $this->assertEquals($list->offsetGet('object'), null);
    }
}
