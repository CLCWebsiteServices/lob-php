<?php
/**
 * BankAccountTest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Client\Test\Model;

use OpenAPI\Client\Model\BankAccount;
use PHPUnit\Framework\TestCase;

/**
 * BankAccountTest Class Doc Comment
 *
 * @category    Class
 * @description BankAccount
 * @package     OpenAPI\Client
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class BankAccountTest extends TestCase
{
    /**
     * Test attribute "description"
     * @group bank_account
     * @group unit
     * @group model
     */
    public function testPropertyDescription()
    {
        // Procedural
        $bank = new BankAccount();
        $bank->setDescription("fake");
        $this->assertEquals($bank->getDescription(), "fake");

        // Construction
        $bank = new BankAccount(["description" => "fake2"]);
        $this->assertEquals($bank->getDescription(), "fake2");

        // Array Access
        $bank = new BankAccount();
        $bank["description"] = "fake3";
        $this->assertEquals($bank->getDescription(), "fake3");
    }

    /**
     * Test attribute "description"
     * @group bank_account
     * @group unit
     * @group model
     */
    public function testPropertyDescriptionException()
    {
        // Procedural
        $bank = new BankAccount();
        $this->expectException(\InvalidArgumentException::class);
        $bank->setDescription(str_repeat("N", 256));
    }

    /**
     * Test attribute "routing_number"
     * @group bank_account
     * @group unit
     * @group model
     */
    public function testPropertyRoutingNumber()
    {
        // Procedural
        $bank = new BankAccount();
        $bank->setRoutingNumber("123456789");
        $this->assertEquals($bank->getRoutingNumber(), "123456789");

        // Construction
        $bank = new BankAccount(["routing_number" => "123456789"]);
        $this->assertEquals($bank->getRoutingNumber(), "123456789");

        // Array Access
        $bank = new BankAccount();
        $bank["routing_number"] = "123456789";
        $this->assertEquals($bank->getRoutingNumber(), "123456789");
    }

    /**
     * Test attribute "routing_number"
     * @group bank_account
     * @group unit
     * @group model
     */
    public function testPropertyRoutingNumberExceptionShort()
    {
        $bank = new BankAccount();
        $this->expectException(\InvalidArgumentException::class);
        $bank->setRoutingNumber("SHORT");
    }

    /**
     * Test attribute "routing_number"
     * @group bank_account
     * @group unit
     * @group model
     */
    public function testPropertyRoutingNumberExceptionLong()
    {
        // Procedural
        $bank = new BankAccount();
        $this->expectException(\InvalidArgumentException::class);
        $bank->setRoutingNumber("LONG_LONG_LONG");
    }

    /**
     * Test attribute "account_number"
     * @group bank_account
     * @group unit
     * @group model
     */
    public function testPropertyAccountNumber()
    {
        // Procedural
        $bank = new BankAccount();
        $bank->setAccountNumber("fake");
        $this->assertEquals($bank->getAccountNumber(), "fake");

        // Construction
        $bank = new BankAccount(["account_number" => "fake2"]);
        $this->assertEquals($bank->getAccountNumber(), "fake2");

        // Array Access
        $bank = new BankAccount();
        $bank["account_number"] = "fake3";
        $this->assertEquals($bank->getAccountNumber(), "fake3");
    }

    /**
     * Test attribute "account_number"
     * @group bank_account
     * @group unit
     * @group model
     */
    public function testPropertyAccountNumberException()
    {
        $bank = new BankAccount();
        $this->expectException(\InvalidArgumentException::class);
        $bank->setAccountNumber(str_repeat("N", 18));
    }

    /**
     * Test attribute "account_type"
     * @group bank_account
     * @group unit
     * @group model
     */
    public function testPropertyAccountType()
    {
        // Procedural
        $bank = new BankAccount();
        $bank->setAccountType("individual");
        $this->assertEquals($bank->getAccountType(), "individual");

        // Construction
        $bank = new BankAccount(["account_type" => "individual"]);
        $this->assertEquals($bank->getAccountType(), "individual");

        // Array Access
        $bank = new BankAccount();
        $bank["account_type"] = "individual";
        $this->assertEquals($bank->getAccountType(), "individual");
    }

    /**
     * Test attribute "account_type"
     * @group bank_account
     * @group unit
     * @group model
     */
    public function testPropertyAccountTypeException()
    {
        $bank = new BankAccount();
        $this->expectException(\InvalidArgumentException::class);
        $bank->setAccountType("NOPE");
    }

    /**
     * Test attribute "signatory"
     * @group bank_account
     * @group unit
     * @group model
     */
    public function testPropertySignatory()
    {
        // Procedural
        $bank = new BankAccount();
        $bank->setSignatory("fake");
        $this->assertEquals($bank->getSignatory(), "fake");

        // Construction
        $bank = new BankAccount(["signatory" => "fake2"]);
        $this->assertEquals($bank->getSignatory(), "fake2");

        // Array Access
        $bank = new BankAccount();
        $bank["signatory"] = "fake3";
        $this->assertEquals($bank->getSignatory(), "fake3");
    }

    /**
     * Test attribute "signatory"
     * @group bank_account
     * @group unit
     * @group model
     */
    public function testPropertySignatoryException()
    {
        $bank = new BankAccount();
        $this->expectException(\InvalidArgumentException::class);
        $bank->setSignatory(str_repeat("N", 31));
    }

    /**
     * Test attribute "metadata"
     * @group bank_account
     * @group unit
     * @group model
     */
    public function testPropertyMetadata()
    {
        // Procedural
        $bank = new BankAccount();
        $bank->setMetadata(["campaign" => "fake"]);
        $this->assertEquals($bank->getMetadata()["campaign"], "fake");

        // Construction
        $bank = new BankAccount(["metadata" => ["campaign" => "fake2"]]);
        $this->assertEquals($bank->getMetadata()["campaign"], "fake2");

        // Array Access
        $bank = new BankAccount();
        $bank["metadata"] = ["campaign" => "fake3"];
        $this->assertEquals($bank->getMetadata()["campaign"], "fake3");
    }

    /**
     * Test attribute "id"
     * @group bank_account
     * @group unit
     * @group model
     */
    public function testPropertyId()
    {
        // Procedural
        $bank = new BankAccount();
        $bank->setId("bank_fake");
        $this->assertEquals($bank->getId(), "bank_fake");

        // Construction
        $bank = new BankAccount(["id" => "bank_fake2"]);
        $this->assertEquals($bank->getId(), "bank_fake2");

        // Array Access
        $bank = new BankAccount();
        $bank["id"] = "bank_fake3";
        $this->assertEquals($bank->getId(), "bank_fake3");
    }

    /**
     * Test attribute "id"
     * @group bank_account
     * @group unit
     * @group model
     */
    public function testPropertyIdException()
    {
        $bank = new BankAccount();
        $this->expectException(\InvalidArgumentException::class);
        $bank->setId("NOPE");
    }

    /**
     * Test attribute "signature_url"
     * @group bank_account
     * @group unit
     * @group model
     */
    public function testPropertySignatureUrl()
    {
        $url = "https://lob-assets.com/bank-accounts/asd_asdfghjkqwertyui.pdf?version=123&expires=1234567890&signature=aksdf";

        // Procedural
        $bank = new BankAccount();
        $bank->setSignatureUrl($url);
        $this->assertEquals($bank->getSignatureUrl(), $url);

        // Construction
        $bank = new BankAccount(["signature_url" => $url]);
        $this->assertEquals($bank->getSignatureUrl(), $url);

        // Array Access
        $bank = new BankAccount();
        $bank["signature_url"] = "fake signatory";
        $this->assertEquals($bank->getSignatureUrl(), "fake signatory");
    }

    /**
     * Test attribute "signature_url"
     * @group bank_account
     * @group unit
     * @group model
     */
    public function testPropertySignatureUrlException()
    {
        $bank = new BankAccount();
        $this->expectException(\InvalidArgumentException::class);
        $bank->setSignatureUrl("NOPE");
    }

    /**
     * Test attribute "bank_name"
     * @group bank_account
     * @group unit
     * @group model
     */
    public function testPropertyBankName()
    {
        // Procedural
        $bank = new BankAccount();
        $bank->setBankName("bank_fake");
        $this->assertEquals($bank->getBankName(), "bank_fake");

        // Construction
        $bank = new BankAccount(["bank_name" => "bank_fake2"]);
        $this->assertEquals($bank->getBankName(), "bank_fake2");

        // Array Access
        $bank = new BankAccount();
        $bank["bank_name"] = "bank_fake3";
        $this->assertEquals($bank->getBankName(), "bank_fake3");
    }

    /**
     * Test attribute "verified"
     * @group bank_account
     * @group unit
     * @group model
     */
    public function testPropertyVerified()
    {
        // Procedural
        $bank = new BankAccount();
        $bank->setVerified(true);
        $this->assertEquals($bank->getVerified(), true);
    }

    /**
     * Test attribute "date_created"
     * @group bank_account
     * @group unit
     * @group model
     */
    public function testPropertyDateCreated()
    {
        $date = new \DateTime('2011-01-01T15:03:01.012345Z');

        // Procedural
        $bank = new BankAccount();
        $bank->setDateCreated($date);
        $this->assertEquals($bank->getDateCreated(), $date);
    }

    /**
     * Test attribute "date_modified"
     * @group bank_account
     * @group unit
     * @group model
     */
    public function testPropertyDateModified()
    {
        $date = new \DateTime('2011-01-01T15:03:01.012345Z');

        // Procedural
        $bank = new BankAccount();
        $bank->setDateModified($date);
        $this->assertEquals($bank->getDateModified(), $date);
    }

    /**
     * Test attribute "deleted"
     * @group bank_account
     * @group unit
     * @group model
     */
    public function testPropertyDeleted()
    {
        // Procedural
        $bank = new BankAccount();
        $bank->setDeleted(true);
        $this->assertEquals($bank->getDeleted(), true);
    }

    /**
     * Test attribute "object"
     * @group bank_account
     * @group unit
     * @group model
     */
    public function testPropertyObject()
    {
        // Procedural
        $bank = new BankAccount();
        $bank->setObject("bank_account");
        $this->assertEquals($bank->getObject(), "bank_account");
    }

    /**
     * Test attribute "object"
     * @group bank_account
     * @group unit
     * @group model
     */
    public function testPropertyObjectException()
    {
        $bank = new BankAccount();
        $this->expectException(\InvalidArgumentException::class);
        $bank->setObject("Nope");
    }

    /** **** **** **** **** **** **/
    /**  Generic Model Helpers   **/
    /** **** **** **** **** **** **/

    /**
     * Test attribute "ModelName"
     * @group bank_account
     * @group unit
     * @group model
     */
    public function testPropertyModelName()
    {
        $bank = new BankAccount();
        $this->assertEquals($bank->getModelName(), "bank_account");
    }

    /**
     * Test attribute "ListInvalidProperties"
     * @group bank_account
     * @group unit
     * @group model
     */
    public function testValidProperties()
    {
        $bank = new BankAccount();
        $bank["description"] = str_repeat("N", 256);
        $bank["routing_number"] = str_repeat("N", 10);
        $bank["account_number"] = str_repeat("N", 18);
        $bank["account_type"] = "NOPE";
        $bank["signatory"] = str_repeat("N", 31);
        $bank["id"] = "NOPE";
        $bank["signature_url"] = "NOPE";
        $bank["object"] = str_repeat("N", 18);

        $invalidPros = $bank->listInvalidProperties();
        $this->assertEquals(count($invalidPros), 8);
        $this->assertEquals($bank->valid(), false);

        $bank = new BankAccount();
        $bank["routing_number"] = "SHORT";

        $invalidPros = $bank->listInvalidProperties();
        $this->assertEquals(count($invalidPros), 1);
        $this->assertEquals($bank->valid(), false);
    }

    /**
     * Tests for alternative property accessors
     * @group bank_account
     * @group unit
     * @group model
     */
    public function testGenericProperties()
    {
        $list = new BankAccount();
        $list->offsetSet('object', 'bank_account');
        $this->assertEquals($list->offsetExists('object'), true);
        $this->assertEquals($list->offsetGet('object'), 'bank_account');
        $list->offsetUnset('object');
        $this->assertEquals($list->offsetGet('object'), null);
    }
}
