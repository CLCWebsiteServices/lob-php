<?php
/**
 * CardTest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Client\Test\Model;

use OpenAPI\Client\Model\Card;
use OpenAPI\Client\Model\Thumbnail;
use PHPUnit\Framework\TestCase;
use function MongoDB\BSON\toJSON;

/**
 * CardTest Class Doc Comment
 *
 * @category    Class
 * @description Card
 * @package     OpenAPI\Client
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class CardTest extends TestCase
{
    /**
     * Test attribute "id"
     * @group card
     * @group unit
     * @group model
     */
    public function testPropertyId()
    {
        // Procedural
        $card = new Card();
        $card->setId("card_fake");
        $this->assertEquals($card->getId(), "card_fake");

        // Construction
        $card = new Card(["id" => "card_fake2"]);
        $this->assertEquals($card->getId(), "card_fake2");

        // Array Access
        $card = new Card();
        $card["id"] = "card_fake3";
        $this->assertEquals($card->getId(), "card_fake3");
    }

    /**
     * Test attribute "id"
     * @group card
     * @group unit
     * @group model
     */
    public function testPropertyIdException()
    {
        $card = new Card();
        $this->expectException(\InvalidArgumentException::class);
        $card->setId("NOPE");
    }

    /**
     * Test attribute "url"
     * @group card
     * @group unit
     * @group model
     */
    public function testPropertyUrl()
    {
        $url = "DOES NOT NEED TO BE A REAL URL";

        // Procedural
        $card = new Card();
        $card->setUrl($url);
        $this->assertEquals($card->getUrl(), $url);

        // Construction
        $card = new Card(["url" => $url]);
        $this->assertEquals($card->getUrl(), $url);

        // Array Access
        $card = new Card();
        $card["url"] = $url;
        $this->assertEquals($card->getUrl(), $url);
    }

    /**
     * Test attribute "url"
     * @group card
     * @group unit
     * @group model
     */
    public function testPropertyUrlException()
    {
        $card = new Card();
        $this->expectException(\InvalidArgumentException::class);
        $card->setUrl(str_repeat("N", 2084));
    }

    /**
     * Test attribute "url"
     * @group card
     * @group unit
     * @group model
     */
    public function testPropertyUrlExceptionShort()
    {
        $card = new Card();
        $this->expectException(\InvalidArgumentException::class);
        $card->setUrl("");
    }

    /**
     * Test attribute "auto_reorder"
     * @group card
     * @group unit
     * @group model
     */
    public function testPropertyAutoReorder()
    {
        // Procedural
        $card = new Card();
        $card->setAutoReorder(false);
        $this->assertEquals($card->getAutoReorder(), false);
    }

    /**
     * Test attribute "reorder_quantity"
     * @group card
     * @group unit
     * @group model
     */
    public function testPropertyReorderQuantity()
    {
        // Procedural
        $card = new Card();
        $card->setReorderQuantity(11);
        $this->assertEquals($card->getReorderQuantity(), 11);
    }

    /**
     * Test attribute "raw_url"
     * @group card
     * @group unit
     * @group model
     */
    public function testPropertyRawUrl()
    {
        $url = "DOES NOT NEED TO BE A REAL URL";

        // Procedural
        $card = new Card();
        $card->setRawUrl($url);
        $this->assertEquals($card->getRawUrl(), $url);

        // Construction
        $card = new Card(["raw_url" => $url]);
        $this->assertEquals($card->getRawUrl(), $url);

        // Array Access
        $card = new Card();
        $card["raw_url"] = $url;
        $this->assertEquals($card->getRawUrl(), $url);
    }

    /**
     * Test attribute "raw_url"
     * @group card
     * @group unit
     * @group model
     */
    public function testPropertyRawUrlException()
    {
        $card = new Card();
        $this->expectException(\InvalidArgumentException::class);
        $card->setRawUrl(str_repeat("N", 2084));
    }

    /**
     * Test attribute "raw_url"
     * @group card
     * @group unit
     * @group model
     */
    public function testPropertyRawUrlExceptionShort()
    {
        $card = new Card();
        $this->expectException(\InvalidArgumentException::class);
        $card->setRawUrl("");
    }

    /**
     * Test attribute "front_original_url"
     * @group card
     * @group unit
     * @group model
     */
    public function testPropertyFrontOriginalUrl()
    {
        $url = "DOES NOT NEED TO BE A REAL URL";

        // Procedural
        $card = new Card();
        $card->setFrontOriginalUrl($url);
        $this->assertEquals($card->getFrontOriginalUrl(), $url);

        // Construction
        $card = new Card(["front_original_url" => $url]);
        $this->assertEquals($card->getFrontOriginalUrl(), $url);

        // Array Access
        $card = new Card();
        $card["front_original_url"] = $url;
        $this->assertEquals($card->getFrontOriginalUrl(), $url);
    }

    /**
     * Test attribute "front_original_url"
     * @group card
     * @group unit
     * @group model
     */
    public function testPropertyFrontOriginalUrlException()
    {
        $card = new Card();
        $this->expectException(\InvalidArgumentException::class);
        $card->setFrontOriginalUrl(str_repeat("N", 2084));
    }

    /**
     * Test attribute "front_original_url"
     * @group card
     * @group unit
     * @group model
     */
    public function testPropertyFrontOriginalUrlExceptionShort()
    {
        $card = new Card();
        $this->expectException(\InvalidArgumentException::class);
        $card->setFrontOriginalUrl("");
    }

    /**
     * Test attribute "back_original_url"
     * @group card
     * @group unit
     * @group model
     */
    public function testPropertyBackOriginalUrl()
    {
        $url = "DOES NOT NEED TO BE A REAL URL";

        // Procedural
        $card = new Card();
        $card->setBackOriginalUrl($url);
        $this->assertEquals($card->getBackOriginalUrl(), $url);

        // Construction
        $card = new Card(["back_original_url" => $url]);
        $this->assertEquals($card->getBackOriginalUrl(), $url);

        // Array Access
        $card = new Card();
        $card["back_original_url"] = $url;
        $this->assertEquals($card->getBackOriginalUrl(), $url);
    }

    /**
     * Test attribute "back_original_url"
     * @group card
     * @group unit
     * @group model
     */
    public function testPropertyBackOriginalUrlException()
    {
        $card = new Card();
        $this->expectException(\InvalidArgumentException::class);
        $card->setBackOriginalUrl(str_repeat("N", 2084));
    }

    /**
     * Test attribute "back_original_url"
     * @group card
     * @group unit
     * @group model
     */
    public function testPropertyBackOriginalUrlExceptionShort()
    {
        $card = new Card();
        $this->expectException(\InvalidArgumentException::class);
        $card->setBackOriginalUrl("");
    }

    /**
     * Test attribute "thumbnails"
     * @group card
     * @group unit
     * @group model
     */
    public function testPropertyThumbnails()
    {
        $thumbnails = [ new Thumbnail() ];

        // Procedural
        $card = new Card();
        $card->setThumbnails($thumbnails);
        $this->assertEquals($card->getThumbnails(), $thumbnails);
    }
    /**
     * Test attribute "thumbnails"
     * @group card
     * @group unit
     * @group model
     */
    public function testPropertyThumbnailsNoThumbNails()
    {
        // Procedural
        $card = new Card();
        $card->setThumbnails([]);
        $this->assertEquals($card->getThumbnails(), []);
    }

    /**
     * Test attribute "available_quantity"
     * @group card
     * @group unit
     * @group model
     */
    public function testPropertyAvailableQuantity()
    {
        // Procedural
        $card = new Card();
        $card->setAvailableQuantity(1);
        $this->assertEquals($card->getAvailableQuantity(), 1);
    }

    /**
     * Test attribute "pending_quantity"
     * @group card
     * @group unit
     * @group model
     */
    public function testPropertyPendingQuantity()
    {
        // Procedural
        $card = new Card();
        $card->setPendingQuantity(1);
        $this->assertEquals($card->getPendingQuantity(), 1);
    }

    /**
     * Test attribute "status"
     * @group card
     * @group unit
     * @group model
     */
    public function testPropertyStatus()
    {
        // Procedural
        $card = new Card();
        $card->setStatus("processed");
        $this->assertEquals($card->getStatus(), "processed");
    }

    /**
     * Test attribute "status"
     * @group card
     * @group unit
     * @group model
     */
    public function testPropertyStatusException()
    {
        // Procedural
        $card = new Card();
        $this->expectException(\InvalidArgumentException::class);
        $card->setStatus("fake");
    }

    /**
     * Test attribute "orientation"
     * @group card
     * @group unit
     * @group model
     */
    public function testPropertyOrientation()
    {
        // Procedural
        $card = new Card();
        $card->setOrientation("horizontal");
        $this->assertEquals($card->getOrientation(), "horizontal");
    }

    /**
     * Test attribute "orientation"
     * @group card
     * @group unit
     * @group model
     */
    public function testPropertyOrientationException()
    {
        // Procedural
        $card = new Card();
        $this->expectException(\InvalidArgumentException::class);
        $card->setOrientation("fake");
    }

    /**
     * Test attribute "threshold_amount"
     * @group card
     * @group unit
     * @group model
     */
    public function testPropertyThresholdAmount()
    {
        // Procedural
        $card = new Card();
        $card->setThresholdAmount(1);
        $this->assertEquals($card->getThresholdAmount(), 1);
    }

    /**
     * Test attribute "date_created"
     * @group card
     * @group unit
     * @group model
     */
    public function testPropertyDateCreated()
    {
        $date = new \DateTime('2011-01-01T15:03:01.012345Z');

        // Procedural
        $card = new Card();
        $card->setDateCreated($date);
        $this->assertEquals($card->getDateCreated(), $date);
    }

    /**
     * Test attribute "date_modified"
     * @group card
     * @group unit
     * @group model
     */
    public function testPropertyDateModified()
    {
        $date = new \DateTime('2011-01-01T15:03:01.012345Z');

        // Procedural
        $card = new Card();
        $card->setDateModified($date);
        $this->assertEquals($card->getDateModified(), $date);
    }

    /**
     * Test attribute "deleted"
     * @group card
     * @group unit
     * @group model
     */
    public function testPropertyDeleted()
    {
        // Procedural
        $card = new Card();
        $card->setDeleted(true);
        $this->assertEquals($card->getDeleted(), true);
    }

    /**
     * Test attribute "object"
     * @group card
     * @group unit
     * @group model
     */
    public function testPropertyObject()
    {
        // Procedural
        $card = new Card();
        $card->setObject("card");
        $this->assertEquals($card->getObject(), "card");
    }

    /**
     * Test attribute "description"
     * @group card
     * @group unit
     * @group model
     */
    public function testPropertyDescription()
    {
        // Procedural
        $card = new Card();
        $card->setDescription("fake");
        $this->assertEquals($card->getDescription(), "fake");
    }

    /**
     * Test attribute "description"
     * @group card
     * @group unit
     * @group model
     */
    public function testPropertyDescriptionException()
    {
        $card = new Card();
        $this->expectException(\InvalidArgumentException::class);
        $card->setDescription(str_repeat("N", 256));
    }

    /**
     * Test attribute "size"
     * @group card
     * @group unit
     * @group model
     */
    public function testPropertySize()
    {
        // Procedural
        $card = new Card();
        $card->setSize("3.375x2.125");
        $this->assertEquals($card->getSize(), "3.375x2.125");
    }

    /**
     * Test attribute "size"
     * @group card
     * @group unit
     * @group model
     */
    public function testPropertySizeException()
    {
        // Procedural
        $card = new Card();
        $this->expectException(\InvalidArgumentException::class);
        $card->setSize("fake");
    }

    /** **** **** **** **** **** **/
    /**  Generic Model Helpers   **/
    /** **** **** **** **** **** **/

    /**
     * Test attribute "ModelName"
     * @group billing_group
     * @group unit
     * @group model
     */
    public function testPropertyModelName()
    {
        $card = new Card();
        $this->assertEquals($card->getModelName(), "card");
    }

    /**
     * Test attribute "ListInvalidProperties"
     * @group billing_group
     * @group unit
     * @group model
     */
    public function testValidProperties()
    {
        $card = new Card();
        $card["id"] = "NOPE";
        $card["url"] = str_repeat("N", 2084);
        $card["raw_url"] = str_repeat("N", 2084);
        $card["front_original_url"] = str_repeat("N", 2084);
        $card["back_original_url"] = str_repeat("N", 2084);
        $card["status"] = "NOPE";
        $card["orientation"] = "NOPE";
        $card["object"] = "NOPE";
        $card["description"] =  str_repeat("N", 256);
        $card["size"] =  "NOPE";

        $invalidPros = $card->listInvalidProperties();
        $this->assertEquals(count($invalidPros), 10);
        $this->assertEquals($card->valid(), false);

        $card = new Card();
        $card["url"] = "";
        $card["raw_url"] = "";
        $card["front_original_url"] = "";
        $card["back_original_url"] = "";

        $invalidPros = $card->listInvalidProperties();
        $this->assertEquals(count($invalidPros), 4);
        $this->assertEquals($card->valid(), false);
    }

    /**
     * Tests for alternative property accessors
     * @group billing_group
     * @group unit
     * @group model
     */
    public function testGenericProperties()
    {
        $list = new Card();
        $list->offsetSet('object', 'bank_account');
        $this->assertEquals($list->offsetExists('object'), true);
        $this->assertEquals($list->offsetGet('object'), 'bank_account');
        $list->offsetUnset('object');
        $this->assertEquals($list->offsetGet('object'), null);
    }
}
