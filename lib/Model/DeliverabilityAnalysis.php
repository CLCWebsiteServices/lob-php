<?php
/**
 * DeliverabilityAnalysis
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DeliverabilityAnalysis Class Doc Comment
 *
 * @category Class
 * @description A nested object containing a breakdown of the deliverability of an address.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class DeliverabilityAnalysis implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'deliverability_analysis';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'dpv_confirmation' => 'string',
        'dpv_cmra' => 'string',
        'dpv_vacant' => 'string',
        'dpv_active' => 'string',
        'dpv_inactive_reason' => 'string',
        'dpv_throwback' => 'string',
        'dpv_non_delivery_day_flag' => 'string',
        'dpv_non_delivery_day_values' => 'string',
        'dpv_no_secure_location' => 'string',
        'dpv_door_not_accessible' => 'string',
        'dpv_footnotes' => '\OpenAPI\Client\Model\DpvFootnote[]',
        'ews_match' => 'bool',
        'lacs_indicator' => 'string',
        'lacs_return_code' => 'string',
        'suite_return_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'dpv_confirmation' => null,
        'dpv_cmra' => null,
        'dpv_vacant' => null,
        'dpv_active' => null,
        'dpv_inactive_reason' => null,
        'dpv_throwback' => null,
        'dpv_non_delivery_day_flag' => null,
        'dpv_non_delivery_day_values' => null,
        'dpv_no_secure_location' => null,
        'dpv_door_not_accessible' => null,
        'dpv_footnotes' => null,
        'ews_match' => null,
        'lacs_indicator' => null,
        'lacs_return_code' => null,
        'suite_return_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dpv_confirmation' => 'dpv_confirmation',
        'dpv_cmra' => 'dpv_cmra',
        'dpv_vacant' => 'dpv_vacant',
        'dpv_active' => 'dpv_active',
        'dpv_inactive_reason' => 'dpv_inactive_reason',
        'dpv_throwback' => 'dpv_throwback',
        'dpv_non_delivery_day_flag' => 'dpv_non_delivery_day_flag',
        'dpv_non_delivery_day_values' => 'dpv_non_delivery_day_values',
        'dpv_no_secure_location' => 'dpv_no_secure_location',
        'dpv_door_not_accessible' => 'dpv_door_not_accessible',
        'dpv_footnotes' => 'dpv_footnotes',
        'ews_match' => 'ews_match',
        'lacs_indicator' => 'lacs_indicator',
        'lacs_return_code' => 'lacs_return_code',
        'suite_return_code' => 'suite_return_code'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dpv_confirmation' => 'setDpvConfirmation',
        'dpv_cmra' => 'setDpvCmra',
        'dpv_vacant' => 'setDpvVacant',
        'dpv_active' => 'setDpvActive',
        'dpv_inactive_reason' => 'setDpvInactiveReason',
        'dpv_throwback' => 'setDpvThrowback',
        'dpv_non_delivery_day_flag' => 'setDpvNonDeliveryDayFlag',
        'dpv_non_delivery_day_values' => 'setDpvNonDeliveryDayValues',
        'dpv_no_secure_location' => 'setDpvNoSecureLocation',
        'dpv_door_not_accessible' => 'setDpvDoorNotAccessible',
        'dpv_footnotes' => 'setDpvFootnotes',
        'ews_match' => 'setEwsMatch',
        'lacs_indicator' => 'setLacsIndicator',
        'lacs_return_code' => 'setLacsReturnCode',
        'suite_return_code' => 'setSuiteReturnCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dpv_confirmation' => 'getDpvConfirmation',
        'dpv_cmra' => 'getDpvCmra',
        'dpv_vacant' => 'getDpvVacant',
        'dpv_active' => 'getDpvActive',
        'dpv_inactive_reason' => 'getDpvInactiveReason',
        'dpv_throwback' => 'getDpvThrowback',
        'dpv_non_delivery_day_flag' => 'getDpvNonDeliveryDayFlag',
        'dpv_non_delivery_day_values' => 'getDpvNonDeliveryDayValues',
        'dpv_no_secure_location' => 'getDpvNoSecureLocation',
        'dpv_door_not_accessible' => 'getDpvDoorNotAccessible',
        'dpv_footnotes' => 'getDpvFootnotes',
        'ews_match' => 'getEwsMatch',
        'lacs_indicator' => 'getLacsIndicator',
        'lacs_return_code' => 'getLacsReturnCode',
        'suite_return_code' => 'getSuiteReturnCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const DPV_CONFIRMATION_Y = 'Y';
    const DPV_CONFIRMATION_S = 'S';
    const DPV_CONFIRMATION_D = 'D';
    const DPV_CONFIRMATION_N = 'N';
    const DPV_CONFIRMATION_EMPTY = '';
    const DPV_CMRA_Y = 'Y';
    const DPV_CMRA_N = 'N';
    const DPV_CMRA_EMPTY = '';
    const DPV_VACANT_Y = 'Y';
    const DPV_VACANT_N = 'N';
    const DPV_VACANT_EMPTY = '';
    const DPV_ACTIVE_Y = 'Y';
    const DPV_ACTIVE_N = 'N';
    const DPV_ACTIVE_EMPTY = '';
    const DPV_INACTIVE_REASON__01 = '01';
    const DPV_INACTIVE_REASON__02 = '02';
    const DPV_INACTIVE_REASON__03 = '03';
    const DPV_INACTIVE_REASON__04 = '04';
    const DPV_INACTIVE_REASON__05 = '05';
    const DPV_INACTIVE_REASON__06 = '06';
    const DPV_INACTIVE_REASON_EMPTY = '';
    const DPV_THROWBACK_Y = 'Y';
    const DPV_THROWBACK_N = 'N';
    const DPV_THROWBACK_EMPTY = '';
    const DPV_NON_DELIVERY_DAY_FLAG_Y = 'Y';
    const DPV_NON_DELIVERY_DAY_FLAG_N = 'N';
    const DPV_NON_DELIVERY_DAY_FLAG_EMPTY = '';
    const DPV_NO_SECURE_LOCATION_Y = 'Y';
    const DPV_NO_SECURE_LOCATION_N = 'N';
    const DPV_NO_SECURE_LOCATION_EMPTY = '';
    const DPV_DOOR_NOT_ACCESSIBLE_Y = 'Y';
    const DPV_DOOR_NOT_ACCESSIBLE_N = 'N';
    const DPV_DOOR_NOT_ACCESSIBLE_EMPTY = '';
    const LACS_INDICATOR_Y = 'Y';
    const LACS_INDICATOR_N = 'N';
    const LACS_INDICATOR_EMPTY = '';
    const SUITE_RETURN_CODE_A = 'A';
    const SUITE_RETURN_CODE__00 = '00';
    const SUITE_RETURN_CODE_EMPTY = '';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDpvConfirmationAllowableValues()
    {
        return [
            self::DPV_CONFIRMATION_Y,
            self::DPV_CONFIRMATION_S,
            self::DPV_CONFIRMATION_D,
            self::DPV_CONFIRMATION_N,
            self::DPV_CONFIRMATION_EMPTY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDpvCmraAllowableValues()
    {
        return [
            self::DPV_CMRA_Y,
            self::DPV_CMRA_N,
            self::DPV_CMRA_EMPTY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDpvVacantAllowableValues()
    {
        return [
            self::DPV_VACANT_Y,
            self::DPV_VACANT_N,
            self::DPV_VACANT_EMPTY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDpvActiveAllowableValues()
    {
        return [
            self::DPV_ACTIVE_Y,
            self::DPV_ACTIVE_N,
            self::DPV_ACTIVE_EMPTY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDpvInactiveReasonAllowableValues()
    {
        return [
            self::DPV_INACTIVE_REASON__01,
            self::DPV_INACTIVE_REASON__02,
            self::DPV_INACTIVE_REASON__03,
            self::DPV_INACTIVE_REASON__04,
            self::DPV_INACTIVE_REASON__05,
            self::DPV_INACTIVE_REASON__06,
            self::DPV_INACTIVE_REASON_EMPTY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDpvThrowbackAllowableValues()
    {
        return [
            self::DPV_THROWBACK_Y,
            self::DPV_THROWBACK_N,
            self::DPV_THROWBACK_EMPTY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDpvNonDeliveryDayFlagAllowableValues()
    {
        return [
            self::DPV_NON_DELIVERY_DAY_FLAG_Y,
            self::DPV_NON_DELIVERY_DAY_FLAG_N,
            self::DPV_NON_DELIVERY_DAY_FLAG_EMPTY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDpvNoSecureLocationAllowableValues()
    {
        return [
            self::DPV_NO_SECURE_LOCATION_Y,
            self::DPV_NO_SECURE_LOCATION_N,
            self::DPV_NO_SECURE_LOCATION_EMPTY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDpvDoorNotAccessibleAllowableValues()
    {
        return [
            self::DPV_DOOR_NOT_ACCESSIBLE_Y,
            self::DPV_DOOR_NOT_ACCESSIBLE_N,
            self::DPV_DOOR_NOT_ACCESSIBLE_EMPTY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLacsIndicatorAllowableValues()
    {
        return [
            self::LACS_INDICATOR_Y,
            self::LACS_INDICATOR_N,
            self::LACS_INDICATOR_EMPTY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSuiteReturnCodeAllowableValues()
    {
        return [
            self::SUITE_RETURN_CODE_A,
            self::SUITE_RETURN_CODE__00,
            self::SUITE_RETURN_CODE_EMPTY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['dpv_confirmation'] = $data['dpv_confirmation'] ?? null;
        $this->container['dpv_cmra'] = $data['dpv_cmra'] ?? null;
        $this->container['dpv_vacant'] = $data['dpv_vacant'] ?? null;
        $this->container['dpv_active'] = $data['dpv_active'] ?? null;
        $this->container['dpv_inactive_reason'] = $data['dpv_inactive_reason'] ?? null;
        $this->container['dpv_throwback'] = $data['dpv_throwback'] ?? null;
        $this->container['dpv_non_delivery_day_flag'] = $data['dpv_non_delivery_day_flag'] ?? null;
        $this->container['dpv_non_delivery_day_values'] = $data['dpv_non_delivery_day_values'] ?? null;
        $this->container['dpv_no_secure_location'] = $data['dpv_no_secure_location'] ?? null;
        $this->container['dpv_door_not_accessible'] = $data['dpv_door_not_accessible'] ?? null;
        $this->container['dpv_footnotes'] = $data['dpv_footnotes'] ?? null;
        $this->container['ews_match'] = $data['ews_match'] ?? null;
        $this->container['lacs_indicator'] = $data['lacs_indicator'] ?? null;
        $this->container['lacs_return_code'] = $data['lacs_return_code'] ?? null;
        $this->container['suite_return_code'] = $data['suite_return_code'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if ($this->container['dpv_confirmation'] === null) {
                $invalidProperties[] = "'dpv_confirmation' can't be null";
            }
        }
        $allowedValues = $this->getDpvConfirmationAllowableValues();
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if (!is_null($this->container['dpv_confirmation']) && !in_array($this->container['dpv_confirmation'], $allowedValues, true)) {
                $invalidProperties[] = sprintf(
                    "invalid value '%s' for 'dpv_confirmation', must be one of '%s'",
                    $this->container['dpv_confirmation'],
                    implode("', '", $allowedValues)
                );
            }
        }

        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if ($this->container['dpv_cmra'] === null) {
                $invalidProperties[] = "'dpv_cmra' can't be null";
            }
        }
        $allowedValues = $this->getDpvCmraAllowableValues();
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if (!is_null($this->container['dpv_cmra']) && !in_array($this->container['dpv_cmra'], $allowedValues, true)) {
                $invalidProperties[] = sprintf(
                    "invalid value '%s' for 'dpv_cmra', must be one of '%s'",
                    $this->container['dpv_cmra'],
                    implode("', '", $allowedValues)
                );
            }
        }

        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if ($this->container['dpv_vacant'] === null) {
                $invalidProperties[] = "'dpv_vacant' can't be null";
            }
        }
        $allowedValues = $this->getDpvVacantAllowableValues();
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if (!is_null($this->container['dpv_vacant']) && !in_array($this->container['dpv_vacant'], $allowedValues, true)) {
                $invalidProperties[] = sprintf(
                    "invalid value '%s' for 'dpv_vacant', must be one of '%s'",
                    $this->container['dpv_vacant'],
                    implode("', '", $allowedValues)
                );
            }
        }

        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if ($this->container['dpv_active'] === null) {
                $invalidProperties[] = "'dpv_active' can't be null";
            }
        }
        $allowedValues = $this->getDpvActiveAllowableValues();
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if (!is_null($this->container['dpv_active']) && !in_array($this->container['dpv_active'], $allowedValues, true)) {
                $invalidProperties[] = sprintf(
                    "invalid value '%s' for 'dpv_active', must be one of '%s'",
                    $this->container['dpv_active'],
                    implode("', '", $allowedValues)
                );
            }
        }

        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if ($this->container['dpv_inactive_reason'] === null) {
                $invalidProperties[] = "'dpv_inactive_reason' can't be null";
            }
        }
        $allowedValues = $this->getDpvInactiveReasonAllowableValues();
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if (!is_null($this->container['dpv_inactive_reason']) && !in_array($this->container['dpv_inactive_reason'], $allowedValues, true)) {
                $invalidProperties[] = sprintf(
                    "invalid value '%s' for 'dpv_inactive_reason', must be one of '%s'",
                    $this->container['dpv_inactive_reason'],
                    implode("', '", $allowedValues)
                );
            }
        }

        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if ($this->container['dpv_throwback'] === null) {
                $invalidProperties[] = "'dpv_throwback' can't be null";
            }
        }
        $allowedValues = $this->getDpvThrowbackAllowableValues();
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if (!is_null($this->container['dpv_throwback']) && !in_array($this->container['dpv_throwback'], $allowedValues, true)) {
                $invalidProperties[] = sprintf(
                    "invalid value '%s' for 'dpv_throwback', must be one of '%s'",
                    $this->container['dpv_throwback'],
                    implode("', '", $allowedValues)
                );
            }
        }

        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if ($this->container['dpv_non_delivery_day_flag'] === null) {
                $invalidProperties[] = "'dpv_non_delivery_day_flag' can't be null";
            }
        }
        $allowedValues = $this->getDpvNonDeliveryDayFlagAllowableValues();
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if (!is_null($this->container['dpv_non_delivery_day_flag']) && !in_array($this->container['dpv_non_delivery_day_flag'], $allowedValues, true)) {
                $invalidProperties[] = sprintf(
                    "invalid value '%s' for 'dpv_non_delivery_day_flag', must be one of '%s'",
                    $this->container['dpv_non_delivery_day_flag'],
                    implode("', '", $allowedValues)
                );
            }
        }

        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if ($this->container['dpv_non_delivery_day_values'] === null) {
                $invalidProperties[] = "'dpv_non_delivery_day_values' can't be null";
            }
        }
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if ($this->container['dpv_no_secure_location'] === null) {
                $invalidProperties[] = "'dpv_no_secure_location' can't be null";
            }
        }
        $allowedValues = $this->getDpvNoSecureLocationAllowableValues();
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if (!is_null($this->container['dpv_no_secure_location']) && !in_array($this->container['dpv_no_secure_location'], $allowedValues, true)) {
                $invalidProperties[] = sprintf(
                    "invalid value '%s' for 'dpv_no_secure_location', must be one of '%s'",
                    $this->container['dpv_no_secure_location'],
                    implode("', '", $allowedValues)
                );
            }
        }

        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if ($this->container['dpv_door_not_accessible'] === null) {
                $invalidProperties[] = "'dpv_door_not_accessible' can't be null";
            }
        }
        $allowedValues = $this->getDpvDoorNotAccessibleAllowableValues();
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if (!is_null($this->container['dpv_door_not_accessible']) && !in_array($this->container['dpv_door_not_accessible'], $allowedValues, true)) {
                $invalidProperties[] = sprintf(
                    "invalid value '%s' for 'dpv_door_not_accessible', must be one of '%s'",
                    $this->container['dpv_door_not_accessible'],
                    implode("', '", $allowedValues)
                );
            }
        }

        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if ($this->container['dpv_footnotes'] === null) {
                $invalidProperties[] = "'dpv_footnotes' can't be null";
            }
        }
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if ($this->container['ews_match'] === null) {
                $invalidProperties[] = "'ews_match' can't be null";
            }
        }
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if ($this->container['lacs_indicator'] === null) {
                $invalidProperties[] = "'lacs_indicator' can't be null";
            }
        }
        $allowedValues = $this->getLacsIndicatorAllowableValues();
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if (!is_null($this->container['lacs_indicator']) && !in_array($this->container['lacs_indicator'], $allowedValues, true)) {
                $invalidProperties[] = sprintf(
                    "invalid value '%s' for 'lacs_indicator', must be one of '%s'",
                    $this->container['lacs_indicator'],
                    implode("', '", $allowedValues)
                );
            }
        }

        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if ($this->container['lacs_return_code'] === null) {
                $invalidProperties[] = "'lacs_return_code' can't be null";
            }
        }
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if ($this->container['suite_return_code'] === null) {
                $invalidProperties[] = "'suite_return_code' can't be null";
            }
        }
        $allowedValues = $this->getSuiteReturnCodeAllowableValues();
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if (!is_null($this->container['suite_return_code']) && !in_array($this->container['suite_return_code'], $allowedValues, true)) {
                $invalidProperties[] = sprintf(
                    "invalid value '%s' for 'suite_return_code', must be one of '%s'",
                    $this->container['suite_return_code'],
                    implode("', '", $allowedValues)
                );
            }
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    

    /**
     * Gets dpv_confirmation
     *
     * @return string
     */
    public function getDpvConfirmation()
    {
        return $this->container['dpv_confirmation'];
    }

    /**
     * Sets dpv_confirmation
     *
     * @param string $dpv_confirmation Result of Delivery Point Validation (DPV), which determines whether or not the address is deliverable by the USPS. Possible values are: * `Y` –– The address is deliverable by the USPS. * `S` –– The address is deliverable by removing the provided secondary unit designator. This information may be incorrect or unnecessary. * `D` –– The address is deliverable to the building's default address but is missing a secondary unit designator and/or number.   There is a chance the mail will not reach the intended recipient. * `N` –– The address is not deliverable according to the USPS, but parts of the address are valid (such as the street and ZIP code). * `''` –– This address is not deliverable. No matching street could be found within the city or ZIP code.
     *
     * @return self
     */
    public function setDpvConfirmation($dpv_confirmation)
    {
        $allowedValues = $this->getDpvConfirmationAllowableValues();
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if (!in_array($dpv_confirmation, $allowedValues, true)) {
                throw new \InvalidArgumentException(
                    sprintf(
                        "Invalid value '%s' for 'dpv_confirmation', must be one of '%s'",
                        $dpv_confirmation,
                        implode("', '", $allowedValues)
                    )
                );
            }
        }

        $this->container['dpv_confirmation'] = $dpv_confirmation;

        return $this;
    }


    /**
     * Gets dpv_cmra
     *
     * @return string
     */
    public function getDpvCmra()
    {
        return $this->container['dpv_cmra'];
    }

    /**
     * Sets dpv_cmra
     *
     * @param string $dpv_cmra indicates whether or not the address is [CMRA-authorized](https://en.wikipedia.org/wiki/Commercial_mail_receiving_agency). Possible values are: * `Y` –– Address is CMRA-authorized. * `N` –– Address is not CMRA-authorized. * `''` –– A DPV match is not made (`deliverability_analysis[dpv_confirmation]` is `N` or an empty string).
     *
     * @return self
     */
    public function setDpvCmra($dpv_cmra)
    {
        $allowedValues = $this->getDpvCmraAllowableValues();
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if (!in_array($dpv_cmra, $allowedValues, true)) {
                throw new \InvalidArgumentException(
                    sprintf(
                        "Invalid value '%s' for 'dpv_cmra', must be one of '%s'",
                        $dpv_cmra,
                        implode("', '", $allowedValues)
                    )
                );
            }
        }

        $this->container['dpv_cmra'] = $dpv_cmra;

        return $this;
    }


    /**
     * Gets dpv_vacant
     *
     * @return string
     */
    public function getDpvVacant()
    {
        return $this->container['dpv_vacant'];
    }

    /**
     * Sets dpv_vacant
     *
     * @param string $dpv_vacant indicates that an address was once deliverable, but has become vacant and is no longer receiving deliveries. Possible values are: * `Y` –– Address is vacant. * `N` –– Address is not vacant. * `''` –– A DPV match is not made (`deliverability_analysis[dpv_confirmation]` is `N` or an empty string).
     *
     * @return self
     */
    public function setDpvVacant($dpv_vacant)
    {
        $allowedValues = $this->getDpvVacantAllowableValues();
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if (!in_array($dpv_vacant, $allowedValues, true)) {
                throw new \InvalidArgumentException(
                    sprintf(
                        "Invalid value '%s' for 'dpv_vacant', must be one of '%s'",
                        $dpv_vacant,
                        implode("', '", $allowedValues)
                    )
                );
            }
        }

        $this->container['dpv_vacant'] = $dpv_vacant;

        return $this;
    }


    /**
     * Gets dpv_active
     *
     * @return string
     */
    public function getDpvActive()
    {
        return $this->container['dpv_active'];
    }

    /**
     * Sets dpv_active
     *
     * @param string $dpv_active Corresponds to the USPS field `dpv_no_stat`. Indicates that an address has been vacated in the recent past, and is no longer receiving deliveries. If it's been unoccupied for 90+ days, or temporarily vacant, this will be flagged. Possible values are: * `Y` –– Address is active. * `N` –– Address is not active. * `''` –– A DPV match is not made (`deliverability_analysis[dpv_confirmation]` is `N` or an empty string).
     *
     * @return self
     */
    public function setDpvActive($dpv_active)
    {
        $allowedValues = $this->getDpvActiveAllowableValues();
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if (!in_array($dpv_active, $allowedValues, true)) {
                throw new \InvalidArgumentException(
                    sprintf(
                        "Invalid value '%s' for 'dpv_active', must be one of '%s'",
                        $dpv_active,
                        implode("', '", $allowedValues)
                    )
                );
            }
        }

        $this->container['dpv_active'] = $dpv_active;

        return $this;
    }


    /**
     * Gets dpv_inactive_reason
     *
     * @return string
     */
    public function getDpvInactiveReason()
    {
        return $this->container['dpv_inactive_reason'];
    }

    /**
     * Sets dpv_inactive_reason
     *
     * @param string $dpv_inactive_reason Indicates the reason why an address is vacant or no longer receiving deliveries. Possible values are: * `01` –– Address does not receive mail from the USPS directly, but is serviced by a drop address. * `02` –– Address not yet deliverable. * `03` –– A DPV match is not made (`deliverability_analysis[dpv_confirmation]` is `N` or an empty string). * `04` –– Address is a College, Military Zone, or other type. * `05` –– Address no longer receives deliveries. * `06` –– Address is missing required secondary information. * `''` –– A DPV match is not made or the address is active.
     *
     * @return self
     */
    public function setDpvInactiveReason($dpv_inactive_reason)
    {
        $allowedValues = $this->getDpvInactiveReasonAllowableValues();
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if (!in_array($dpv_inactive_reason, $allowedValues, true)) {
                throw new \InvalidArgumentException(
                    sprintf(
                        "Invalid value '%s' for 'dpv_inactive_reason', must be one of '%s'",
                        $dpv_inactive_reason,
                        implode("', '", $allowedValues)
                    )
                );
            }
        }

        $this->container['dpv_inactive_reason'] = $dpv_inactive_reason;

        return $this;
    }


    /**
     * Gets dpv_throwback
     *
     * @return string
     */
    public function getDpvThrowback()
    {
        return $this->container['dpv_throwback'];
    }

    /**
     * Sets dpv_throwback
     *
     * @param string $dpv_throwback Indicates a street address for which mail is delivered to a PO Box. Possible values are: * `Y` –– Address is a PO Box throwback delivery point. * `N` –– Address is not a PO Box throwback delivery point. * `''` –– A DPV match is not made (`deliverability_analysis[dpv_confirmation]` is `N` or an empty string).
     *
     * @return self
     */
    public function setDpvThrowback($dpv_throwback)
    {
        $allowedValues = $this->getDpvThrowbackAllowableValues();
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if (!in_array($dpv_throwback, $allowedValues, true)) {
                throw new \InvalidArgumentException(
                    sprintf(
                        "Invalid value '%s' for 'dpv_throwback', must be one of '%s'",
                        $dpv_throwback,
                        implode("', '", $allowedValues)
                    )
                );
            }
        }

        $this->container['dpv_throwback'] = $dpv_throwback;

        return $this;
    }


    /**
     * Gets dpv_non_delivery_day_flag
     *
     * @return string
     */
    public function getDpvNonDeliveryDayFlag()
    {
        return $this->container['dpv_non_delivery_day_flag'];
    }

    /**
     * Sets dpv_non_delivery_day_flag
     *
     * @param string $dpv_non_delivery_day_flag Indicates whether deliveries are not performed on one or more days of the week at an address. Possible values are: * `Y` –– Mail delivery does not occur on some days of the week. * `N` –– Mail delivery occurs every day of the week. * `''` –– A DPV match is not made (`deliverability_analysis[dpv_confirmation]` is `N` or an empty string).
     *
     * @return self
     */
    public function setDpvNonDeliveryDayFlag($dpv_non_delivery_day_flag)
    {
        $allowedValues = $this->getDpvNonDeliveryDayFlagAllowableValues();
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if (!in_array($dpv_non_delivery_day_flag, $allowedValues, true)) {
                throw new \InvalidArgumentException(
                    sprintf(
                        "Invalid value '%s' for 'dpv_non_delivery_day_flag', must be one of '%s'",
                        $dpv_non_delivery_day_flag,
                        implode("', '", $allowedValues)
                    )
                );
            }
        }

        $this->container['dpv_non_delivery_day_flag'] = $dpv_non_delivery_day_flag;

        return $this;
    }


    /**
     * Gets dpv_non_delivery_day_values
     *
     * @return string
     */
    public function getDpvNonDeliveryDayValues()
    {
        return $this->container['dpv_non_delivery_day_values'];
    }

    /**
     * Sets dpv_non_delivery_day_values
     *
     * @param string $dpv_non_delivery_day_values Indicates days of the week (starting on Sunday) deliveries are not performed at an address. For example: * `YNNNNNN` –– Mail delivery does not occur on Sunday's. * `NYNNNYN` –– Mail delivery does not occur on Monday's or Friday's. * `''` –– A DPV match is not made (`deliverability_analysis[dpv_confirmation]` is `N` or an empty string) or address receives mail every day of the week (`deliverability_analysis[dpv_non_delivery_day_flag]` is `N` or an empty string).
     *
     * @return self
     */
    public function setDpvNonDeliveryDayValues($dpv_non_delivery_day_values)
    {
        $this->container['dpv_non_delivery_day_values'] = $dpv_non_delivery_day_values;

        return $this;
    }


    /**
     * Gets dpv_no_secure_location
     *
     * @return string
     */
    public function getDpvNoSecureLocation()
    {
        return $this->container['dpv_no_secure_location'];
    }

    /**
     * Sets dpv_no_secure_location
     *
     * @param string $dpv_no_secure_location Indicates packages to this address will not be left due to security concerns. Possible values are: * `Y` –– Address does not have a secure mailbox. * `N` –– Address has a secure mailbox. * `''` –– A DPV match is not made (`deliverability_analysis[dpv_confirmation]` is `N` or an empty string).
     *
     * @return self
     */
    public function setDpvNoSecureLocation($dpv_no_secure_location)
    {
        $allowedValues = $this->getDpvNoSecureLocationAllowableValues();
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if (!in_array($dpv_no_secure_location, $allowedValues, true)) {
                throw new \InvalidArgumentException(
                    sprintf(
                        "Invalid value '%s' for 'dpv_no_secure_location', must be one of '%s'",
                        $dpv_no_secure_location,
                        implode("', '", $allowedValues)
                    )
                );
            }
        }

        $this->container['dpv_no_secure_location'] = $dpv_no_secure_location;

        return $this;
    }


    /**
     * Gets dpv_door_not_accessible
     *
     * @return string
     */
    public function getDpvDoorNotAccessible()
    {
        return $this->container['dpv_door_not_accessible'];
    }

    /**
     * Sets dpv_door_not_accessible
     *
     * @param string $dpv_door_not_accessible Indicates the door of the address is not accessible for mail delivery. Possible values are: * `Y` –– Door is not accessible. * `N` –– Door is accessible. * `''` –– A DPV match is not made (`deliverability_analysis[dpv_confirmation]` is `N` or an empty string).
     *
     * @return self
     */
    public function setDpvDoorNotAccessible($dpv_door_not_accessible)
    {
        $allowedValues = $this->getDpvDoorNotAccessibleAllowableValues();
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if (!in_array($dpv_door_not_accessible, $allowedValues, true)) {
                throw new \InvalidArgumentException(
                    sprintf(
                        "Invalid value '%s' for 'dpv_door_not_accessible', must be one of '%s'",
                        $dpv_door_not_accessible,
                        implode("', '", $allowedValues)
                    )
                );
            }
        }

        $this->container['dpv_door_not_accessible'] = $dpv_door_not_accessible;

        return $this;
    }


    /**
     * Gets dpv_footnotes
     *
     * @return \OpenAPI\Client\Model\DpvFootnote[]
     */
    public function getDpvFootnotes()
    {
        return $this->container['dpv_footnotes'];
    }

    /**
     * Sets dpv_footnotes
     *
     * @param \OpenAPI\Client\Model\DpvFootnote[] $dpv_footnotes An array of 2-character strings that gives more insight into how `deliverability_analysis[dpv_confirmation]` was determined. Will always include at least 1 string, and can include up to 3. For details, see [US Verification Details](#tag/US-Verification-Types).
     *
     * @return self
     */
    public function setDpvFootnotes($dpv_footnotes)
    {
        $this->container['dpv_footnotes'] = [];
        if ($dpv_footnotes) {
            foreach ($dpv_footnotes as $point) {
                $deserializedData = ObjectSerializer::deserialize($point, '\OpenAPI\Client\Model\DpvFootnote', []);
                
                array_push($this->container['dpv_footnotes'], $deserializedData);
            }
        }

        return $this;
    }


    /**
     * Gets ews_match
     *
     * @return bool
     */
    public function getEwsMatch()
    {
        return $this->container['ews_match'];
    }

    /**
     * Sets ews_match
     *
     * @param bool $ews_match indicates whether or not an address has been flagged in the [Early Warning System](https://docs.informatica.com/data-engineering/data-engineering-quality/10-4-0/address-validator-port-reference/postal-carrier-certification-data-ports/early-warning-system-return-code.html), meaning the address is under development and not yet ready to receive mail. However, it should become available in a few months.
     *
     * @return self
     */
    public function setEwsMatch($ews_match)
    {
        $this->container['ews_match'] = $ews_match;

        return $this;
    }


    /**
     * Gets lacs_indicator
     *
     * @return string
     */
    public function getLacsIndicator()
    {
        return $this->container['lacs_indicator'];
    }

    /**
     * Sets lacs_indicator
     *
     * @param string $lacs_indicator indicates whether this address has been converted by [LACS<sup>Link</sup>](https://postalpro.usps.com/address-quality/lacslink). LACS<sup>Link</sup> corrects outdated addresses into their modern counterparts. Possible values are: * `Y` –– New address produced with a matching record in LACS<sup>Link</sup>. * `N` –– New address could not be produced with a matching record in LACS<sup>Link</sup>. * `''` –– A DPV match is not made (`deliverability_analysis[dpv_confirmation]` is `N` or an empty string).
     *
     * @return self
     */
    public function setLacsIndicator($lacs_indicator)
    {
        $allowedValues = $this->getLacsIndicatorAllowableValues();
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if (!in_array($lacs_indicator, $allowedValues, true)) {
                throw new \InvalidArgumentException(
                    sprintf(
                        "Invalid value '%s' for 'lacs_indicator', must be one of '%s'",
                        $lacs_indicator,
                        implode("', '", $allowedValues)
                    )
                );
            }
        }

        $this->container['lacs_indicator'] = $lacs_indicator;

        return $this;
    }


    /**
     * Gets lacs_return_code
     *
     * @return string
     */
    public function getLacsReturnCode()
    {
        return $this->container['lacs_return_code'];
    }

    /**
     * Sets lacs_return_code
     *
     * @param string $lacs_return_code A code indicating how `deliverability_analysis[lacs_indicator]` was determined. Possible values are: * `A` — A new address was produced because a match was found in LACS<sup>Link</sup>. * `92` — A LACS<sup>Link</sup> record was matched after dropping secondary information. * `14` — A match was found in LACS<sup>Link</sup>, but could not be converted to a deliverable address. * `00` — A match was not found in LACS<sup>Link</sup>, and no new address was produced. * `''` — LACS<sup>Link</sup> was not attempted.
     *
     * @return self
     */
    public function setLacsReturnCode($lacs_return_code)
    {
        $this->container['lacs_return_code'] = $lacs_return_code;

        return $this;
    }


    /**
     * Gets suite_return_code
     *
     * @return string
     */
    public function getSuiteReturnCode()
    {
        return $this->container['suite_return_code'];
    }

    /**
     * Sets suite_return_code
     *
     * @param string $suite_return_code A return code that indicates whether the address was matched and corrected by [Suite<sup>Link</sup>](https://postalpro.usps.com/address-quality-solutions/suitelink). Suite<sup>Link</sup> attempts to provide secondary information to business addresses. Possible values are: * `A` –– A Suite<sup>Link</sup> match was found and secondary information was added. * `00` –– A Suite<sup>Link</sup> match could not be found and no secondary information was added. * `''` –– Suite<sup>Link</sup> lookup was not attempted.
     *
     * @return self
     */
    public function setSuiteReturnCode($suite_return_code)
    {
        $allowedValues = $this->getSuiteReturnCodeAllowableValues();
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if (!in_array($suite_return_code, $allowedValues, true)) {
                throw new \InvalidArgumentException(
                    sprintf(
                        "Invalid value '%s' for 'suite_return_code', must be one of '%s'",
                        $suite_return_code,
                        implode("', '", $allowedValues)
                    )
                );
            }
        }

        $this->container['suite_return_code'] = $suite_return_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


